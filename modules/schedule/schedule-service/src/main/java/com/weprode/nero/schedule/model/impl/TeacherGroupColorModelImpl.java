/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.schedule.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.schedule.model.TeacherGroupColor;
import com.weprode.nero.schedule.model.TeacherGroupColorModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TeacherGroupColor service. Represents a row in the &quot;Schedule_TeacherGroupColor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TeacherGroupColorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeacherGroupColorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TeacherGroupColorImpl
 * @generated
 */
public class TeacherGroupColorModelImpl
	extends BaseModelImpl<TeacherGroupColor> implements TeacherGroupColorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a teacher group color model instance should use the <code>TeacherGroupColor</code> interface instead.
	 */
	public static final String TABLE_NAME = "Schedule_TeacherGroupColor";

	public static final Object[][] TABLE_COLUMNS = {
		{"teacherGroupColorId", Types.BIGINT}, {"teacherId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"color", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("teacherGroupColorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("teacherId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("color", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Schedule_TeacherGroupColor (teacherGroupColorId LONG not null primary key,teacherId LONG,groupId LONG,color VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Schedule_TeacherGroupColor";

	public static final String ORDER_BY_JPQL =
		" ORDER BY teacherGroupColor.teacherGroupColorId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Schedule_TeacherGroupColor.teacherGroupColorId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEACHERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEACHERGROUPCOLORID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TeacherGroupColorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _teacherGroupColorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTeacherGroupColorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _teacherGroupColorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TeacherGroupColor.class;
	}

	@Override
	public String getModelClassName() {
		return TeacherGroupColor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TeacherGroupColor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TeacherGroupColor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TeacherGroupColor, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TeacherGroupColor)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TeacherGroupColor, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TeacherGroupColor, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TeacherGroupColor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TeacherGroupColor, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TeacherGroupColor, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TeacherGroupColor>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TeacherGroupColor.class.getClassLoader(), TeacherGroupColor.class,
			ModelWrapper.class);

		try {
			Constructor<TeacherGroupColor> constructor =
				(Constructor<TeacherGroupColor>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<TeacherGroupColor, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TeacherGroupColor, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TeacherGroupColor, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<TeacherGroupColor, Object>>();
		Map<String, BiConsumer<TeacherGroupColor, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<TeacherGroupColor, ?>>();

		attributeGetterFunctions.put(
			"teacherGroupColorId", TeacherGroupColor::getTeacherGroupColorId);
		attributeSetterBiConsumers.put(
			"teacherGroupColorId",
			(BiConsumer<TeacherGroupColor, Long>)
				TeacherGroupColor::setTeacherGroupColorId);
		attributeGetterFunctions.put(
			"teacherId", TeacherGroupColor::getTeacherId);
		attributeSetterBiConsumers.put(
			"teacherId",
			(BiConsumer<TeacherGroupColor, Long>)
				TeacherGroupColor::setTeacherId);
		attributeGetterFunctions.put("groupId", TeacherGroupColor::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<TeacherGroupColor, Long>)TeacherGroupColor::setGroupId);
		attributeGetterFunctions.put("color", TeacherGroupColor::getColor);
		attributeSetterBiConsumers.put(
			"color",
			(BiConsumer<TeacherGroupColor, String>)TeacherGroupColor::setColor);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTeacherGroupColorId() {
		return _teacherGroupColorId;
	}

	@Override
	public void setTeacherGroupColorId(long teacherGroupColorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teacherGroupColorId = teacherGroupColorId;
	}

	@Override
	public long getTeacherId() {
		return _teacherId;
	}

	@Override
	public void setTeacherId(long teacherId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teacherId = teacherId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTeacherId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("teacherId"));
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public String getColor() {
		if (_color == null) {
			return "";
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_color = color;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TeacherGroupColor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TeacherGroupColor toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TeacherGroupColor>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TeacherGroupColorImpl teacherGroupColorImpl =
			new TeacherGroupColorImpl();

		teacherGroupColorImpl.setTeacherGroupColorId(getTeacherGroupColorId());
		teacherGroupColorImpl.setTeacherId(getTeacherId());
		teacherGroupColorImpl.setGroupId(getGroupId());
		teacherGroupColorImpl.setColor(getColor());

		teacherGroupColorImpl.resetOriginalValues();

		return teacherGroupColorImpl;
	}

	@Override
	public TeacherGroupColor cloneWithOriginalValues() {
		TeacherGroupColorImpl teacherGroupColorImpl =
			new TeacherGroupColorImpl();

		teacherGroupColorImpl.setTeacherGroupColorId(
			this.<Long>getColumnOriginalValue("teacherGroupColorId"));
		teacherGroupColorImpl.setTeacherId(
			this.<Long>getColumnOriginalValue("teacherId"));
		teacherGroupColorImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		teacherGroupColorImpl.setColor(
			this.<String>getColumnOriginalValue("color"));

		return teacherGroupColorImpl;
	}

	@Override
	public int compareTo(TeacherGroupColor teacherGroupColor) {
		long primaryKey = teacherGroupColor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TeacherGroupColor)) {
			return false;
		}

		TeacherGroupColor teacherGroupColor = (TeacherGroupColor)object;

		long primaryKey = teacherGroupColor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TeacherGroupColor> toCacheModel() {
		TeacherGroupColorCacheModel teacherGroupColorCacheModel =
			new TeacherGroupColorCacheModel();

		teacherGroupColorCacheModel.teacherGroupColorId =
			getTeacherGroupColorId();

		teacherGroupColorCacheModel.teacherId = getTeacherId();

		teacherGroupColorCacheModel.groupId = getGroupId();

		teacherGroupColorCacheModel.color = getColor();

		String color = teacherGroupColorCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			teacherGroupColorCacheModel.color = null;
		}

		return teacherGroupColorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TeacherGroupColor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TeacherGroupColor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TeacherGroupColor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TeacherGroupColor)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TeacherGroupColor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TeacherGroupColor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TeacherGroupColor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TeacherGroupColor)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TeacherGroupColor>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _teacherGroupColorId;
	private long _teacherId;
	private long _groupId;
	private String _color;

	public <T> T getColumnValue(String columnName) {
		Function<TeacherGroupColor, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TeacherGroupColor)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("teacherGroupColorId", _teacherGroupColorId);
		_columnOriginalValues.put("teacherId", _teacherId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("color", _color);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("teacherGroupColorId", 1L);

		columnBitmasks.put("teacherId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("color", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TeacherGroupColor _escapedModel;

}