/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.schedule.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.schedule.model.Homework;
import com.weprode.nero.schedule.model.HomeworkModel;
import com.weprode.nero.schedule.model.HomeworkSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Homework service. Represents a row in the &quot;Schedule_Homework&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HomeworkModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HomeworkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HomeworkImpl
 * @generated
 */
@JSON(strict = true)
public class HomeworkModelImpl
	extends BaseModelImpl<Homework> implements HomeworkModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a homework model instance should use the <code>Homework</code> interface instead.
	 */
	public static final String TABLE_NAME = "Schedule_Homework";

	public static final Object[][] TABLE_COLUMNS = {
		{"homeworkId", Types.BIGINT}, {"type_", Types.BIGINT},
		{"sourceSessionId", Types.BIGINT}, {"targetSessionId", Types.BIGINT},
		{"targetWeekId", Types.INTEGER}, {"targetDate", Types.TIMESTAMP},
		{"groupId", Types.BIGINT}, {"teacherId", Types.BIGINT},
		{"description", Types.VARCHAR}, {"estimatedTime", Types.BIGINT},
		{"fromDate", Types.TIMESTAMP}, {"isCustomStudentList", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("homeworkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sourceSessionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("targetSessionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("targetWeekId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("targetDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("teacherId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estimatedTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("isCustomStudentList", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Schedule_Homework (homeworkId LONG not null primary key,type_ LONG,sourceSessionId LONG,targetSessionId LONG,targetWeekId INTEGER,targetDate DATE null,groupId LONG,teacherId LONG,description STRING null,estimatedTime LONG,fromDate DATE null,isCustomStudentList BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table Schedule_Homework";

	public static final String ORDER_BY_JPQL =
		" ORDER BY homework.homeworkId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Schedule_Homework.homeworkId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SOURCESESSIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TARGETSESSIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TARGETWEEKID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HOMEWORKID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Homework toModel(HomeworkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Homework model = new HomeworkImpl();

		model.setHomeworkId(soapModel.getHomeworkId());
		model.setType(soapModel.getType());
		model.setSourceSessionId(soapModel.getSourceSessionId());
		model.setTargetSessionId(soapModel.getTargetSessionId());
		model.setTargetWeekId(soapModel.getTargetWeekId());
		model.setTargetDate(soapModel.getTargetDate());
		model.setGroupId(soapModel.getGroupId());
		model.setTeacherId(soapModel.getTeacherId());
		model.setDescription(soapModel.getDescription());
		model.setEstimatedTime(soapModel.getEstimatedTime());
		model.setFromDate(soapModel.getFromDate());
		model.setIsCustomStudentList(soapModel.isIsCustomStudentList());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Homework> toModels(HomeworkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Homework> models = new ArrayList<Homework>(soapModels.length);

		for (HomeworkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public HomeworkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _homeworkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHomeworkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _homeworkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Homework.class;
	}

	@Override
	public String getModelClassName() {
		return Homework.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Homework, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Homework, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Homework, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Homework)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Homework, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Homework, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Homework)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Homework, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Homework, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Homework>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Homework.class.getClassLoader(), Homework.class,
			ModelWrapper.class);

		try {
			Constructor<Homework> constructor =
				(Constructor<Homework>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Homework, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Homework, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Homework, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Homework, Object>>();
		Map<String, BiConsumer<Homework, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Homework, ?>>();

		attributeGetterFunctions.put("homeworkId", Homework::getHomeworkId);
		attributeSetterBiConsumers.put(
			"homeworkId", (BiConsumer<Homework, Long>)Homework::setHomeworkId);
		attributeGetterFunctions.put("type", Homework::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<Homework, Long>)Homework::setType);
		attributeGetterFunctions.put(
			"sourceSessionId", Homework::getSourceSessionId);
		attributeSetterBiConsumers.put(
			"sourceSessionId",
			(BiConsumer<Homework, Long>)Homework::setSourceSessionId);
		attributeGetterFunctions.put(
			"targetSessionId", Homework::getTargetSessionId);
		attributeSetterBiConsumers.put(
			"targetSessionId",
			(BiConsumer<Homework, Long>)Homework::setTargetSessionId);
		attributeGetterFunctions.put("targetWeekId", Homework::getTargetWeekId);
		attributeSetterBiConsumers.put(
			"targetWeekId",
			(BiConsumer<Homework, Integer>)Homework::setTargetWeekId);
		attributeGetterFunctions.put("targetDate", Homework::getTargetDate);
		attributeSetterBiConsumers.put(
			"targetDate", (BiConsumer<Homework, Date>)Homework::setTargetDate);
		attributeGetterFunctions.put("groupId", Homework::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Homework, Long>)Homework::setGroupId);
		attributeGetterFunctions.put("teacherId", Homework::getTeacherId);
		attributeSetterBiConsumers.put(
			"teacherId", (BiConsumer<Homework, Long>)Homework::setTeacherId);
		attributeGetterFunctions.put("description", Homework::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Homework, String>)Homework::setDescription);
		attributeGetterFunctions.put(
			"estimatedTime", Homework::getEstimatedTime);
		attributeSetterBiConsumers.put(
			"estimatedTime",
			(BiConsumer<Homework, Long>)Homework::setEstimatedTime);
		attributeGetterFunctions.put("fromDate", Homework::getFromDate);
		attributeSetterBiConsumers.put(
			"fromDate", (BiConsumer<Homework, Date>)Homework::setFromDate);
		attributeGetterFunctions.put(
			"isCustomStudentList", Homework::getIsCustomStudentList);
		attributeSetterBiConsumers.put(
			"isCustomStudentList",
			(BiConsumer<Homework, Boolean>)Homework::setIsCustomStudentList);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getHomeworkId() {
		return _homeworkId;
	}

	@Override
	public void setHomeworkId(long homeworkId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeworkId = homeworkId;
	}

	@JSON
	@Override
	public long getType() {
		return _type;
	}

	@Override
	public void setType(long type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	@JSON
	@Override
	public long getSourceSessionId() {
		return _sourceSessionId;
	}

	@Override
	public void setSourceSessionId(long sourceSessionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sourceSessionId = sourceSessionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSourceSessionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sourceSessionId"));
	}

	@JSON
	@Override
	public long getTargetSessionId() {
		return _targetSessionId;
	}

	@Override
	public void setTargetSessionId(long targetSessionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetSessionId = targetSessionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTargetSessionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("targetSessionId"));
	}

	@JSON
	@Override
	public int getTargetWeekId() {
		return _targetWeekId;
	}

	@Override
	public void setTargetWeekId(int targetWeekId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetWeekId = targetWeekId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalTargetWeekId() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("targetWeekId"));
	}

	@JSON
	@Override
	public Date getTargetDate() {
		return _targetDate;
	}

	@Override
	public void setTargetDate(Date targetDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetDate = targetDate;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getTeacherId() {
		return _teacherId;
	}

	@Override
	public void setTeacherId(long teacherId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teacherId = teacherId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public long getEstimatedTime() {
		return _estimatedTime;
	}

	@Override
	public void setEstimatedTime(long estimatedTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estimatedTime = estimatedTime;
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromDate = fromDate;
	}

	@JSON
	@Override
	public boolean getIsCustomStudentList() {
		return _isCustomStudentList;
	}

	@JSON
	@Override
	public boolean isIsCustomStudentList() {
		return _isCustomStudentList;
	}

	@Override
	public void setIsCustomStudentList(boolean isCustomStudentList) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isCustomStudentList = isCustomStudentList;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Homework.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Homework toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Homework>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HomeworkImpl homeworkImpl = new HomeworkImpl();

		homeworkImpl.setHomeworkId(getHomeworkId());
		homeworkImpl.setType(getType());
		homeworkImpl.setSourceSessionId(getSourceSessionId());
		homeworkImpl.setTargetSessionId(getTargetSessionId());
		homeworkImpl.setTargetWeekId(getTargetWeekId());
		homeworkImpl.setTargetDate(getTargetDate());
		homeworkImpl.setGroupId(getGroupId());
		homeworkImpl.setTeacherId(getTeacherId());
		homeworkImpl.setDescription(getDescription());
		homeworkImpl.setEstimatedTime(getEstimatedTime());
		homeworkImpl.setFromDate(getFromDate());
		homeworkImpl.setIsCustomStudentList(isIsCustomStudentList());

		homeworkImpl.resetOriginalValues();

		return homeworkImpl;
	}

	@Override
	public Homework cloneWithOriginalValues() {
		HomeworkImpl homeworkImpl = new HomeworkImpl();

		homeworkImpl.setHomeworkId(
			this.<Long>getColumnOriginalValue("homeworkId"));
		homeworkImpl.setType(this.<Long>getColumnOriginalValue("type_"));
		homeworkImpl.setSourceSessionId(
			this.<Long>getColumnOriginalValue("sourceSessionId"));
		homeworkImpl.setTargetSessionId(
			this.<Long>getColumnOriginalValue("targetSessionId"));
		homeworkImpl.setTargetWeekId(
			this.<Integer>getColumnOriginalValue("targetWeekId"));
		homeworkImpl.setTargetDate(
			this.<Date>getColumnOriginalValue("targetDate"));
		homeworkImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		homeworkImpl.setTeacherId(
			this.<Long>getColumnOriginalValue("teacherId"));
		homeworkImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		homeworkImpl.setEstimatedTime(
			this.<Long>getColumnOriginalValue("estimatedTime"));
		homeworkImpl.setFromDate(this.<Date>getColumnOriginalValue("fromDate"));
		homeworkImpl.setIsCustomStudentList(
			this.<Boolean>getColumnOriginalValue("isCustomStudentList"));

		return homeworkImpl;
	}

	@Override
	public int compareTo(Homework homework) {
		long primaryKey = homework.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Homework)) {
			return false;
		}

		Homework homework = (Homework)object;

		long primaryKey = homework.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Homework> toCacheModel() {
		HomeworkCacheModel homeworkCacheModel = new HomeworkCacheModel();

		homeworkCacheModel.homeworkId = getHomeworkId();

		homeworkCacheModel.type = getType();

		homeworkCacheModel.sourceSessionId = getSourceSessionId();

		homeworkCacheModel.targetSessionId = getTargetSessionId();

		homeworkCacheModel.targetWeekId = getTargetWeekId();

		Date targetDate = getTargetDate();

		if (targetDate != null) {
			homeworkCacheModel.targetDate = targetDate.getTime();
		}
		else {
			homeworkCacheModel.targetDate = Long.MIN_VALUE;
		}

		homeworkCacheModel.groupId = getGroupId();

		homeworkCacheModel.teacherId = getTeacherId();

		homeworkCacheModel.description = getDescription();

		String description = homeworkCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			homeworkCacheModel.description = null;
		}

		homeworkCacheModel.estimatedTime = getEstimatedTime();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			homeworkCacheModel.fromDate = fromDate.getTime();
		}
		else {
			homeworkCacheModel.fromDate = Long.MIN_VALUE;
		}

		homeworkCacheModel.isCustomStudentList = isIsCustomStudentList();

		return homeworkCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Homework, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Homework, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Homework, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Homework)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Homework, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Homework, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Homework, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Homework)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Homework>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _homeworkId;
	private long _type;
	private long _sourceSessionId;
	private long _targetSessionId;
	private int _targetWeekId;
	private Date _targetDate;
	private long _groupId;
	private long _teacherId;
	private String _description;
	private long _estimatedTime;
	private Date _fromDate;
	private boolean _isCustomStudentList;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Homework, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Homework)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("homeworkId", _homeworkId);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("sourceSessionId", _sourceSessionId);
		_columnOriginalValues.put("targetSessionId", _targetSessionId);
		_columnOriginalValues.put("targetWeekId", _targetWeekId);
		_columnOriginalValues.put("targetDate", _targetDate);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("teacherId", _teacherId);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("estimatedTime", _estimatedTime);
		_columnOriginalValues.put("fromDate", _fromDate);
		_columnOriginalValues.put("isCustomStudentList", _isCustomStudentList);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("homeworkId", 1L);

		columnBitmasks.put("type_", 2L);

		columnBitmasks.put("sourceSessionId", 4L);

		columnBitmasks.put("targetSessionId", 8L);

		columnBitmasks.put("targetWeekId", 16L);

		columnBitmasks.put("targetDate", 32L);

		columnBitmasks.put("groupId", 64L);

		columnBitmasks.put("teacherId", 128L);

		columnBitmasks.put("description", 256L);

		columnBitmasks.put("estimatedTime", 512L);

		columnBitmasks.put("fromDate", 1024L);

		columnBitmasks.put("isCustomStudentList", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Homework _escapedModel;

}