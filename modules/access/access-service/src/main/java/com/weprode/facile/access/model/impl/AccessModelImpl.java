/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.facile.access.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.facile.access.model.Access;
import com.weprode.facile.access.model.AccessModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Access service. Represents a row in the &quot;Access_Access&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccessModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccessImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccessImpl
 * @generated
 */
@JSON(strict = true)
public class AccessModelImpl
	extends BaseModelImpl<Access> implements AccessModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a access model instance should use the <code>Access</code> interface instead.
	 */
	public static final String TABLE_NAME = "Access_Access";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accessId", Types.BIGINT},
		{"categoryId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"type_", Types.INTEGER}, {"externalUrl", Types.VARCHAR},
		{"folderId", Types.BIGINT}, {"fileId", Types.BIGINT},
		{"thumbnailId", Types.BIGINT}, {"position", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("externalUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("thumbnailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("position", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Access_Access (uuid_ VARCHAR(75) null,accessId LONG not null primary key,categoryId LONG,title VARCHAR(75) null,type_ INTEGER,externalUrl VARCHAR(75) null,folderId LONG,fileId LONG,thumbnailId LONG,position INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table Access_Access";

	public static final String ORDER_BY_JPQL = " ORDER BY access.accessId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Access_Access.accessId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CATEGORYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCESSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccessModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accessId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccessId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accessId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Access.class;
	}

	@Override
	public String getModelClassName() {
		return Access.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Access, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Access, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Access, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Access)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Access, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Access, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Access)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Access, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Access, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Access, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Access, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Access, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Access, Object>>();
		Map<String, BiConsumer<Access, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Access, ?>>();

		attributeGetterFunctions.put("uuid", Access::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Access, String>)Access::setUuid);
		attributeGetterFunctions.put("accessId", Access::getAccessId);
		attributeSetterBiConsumers.put(
			"accessId", (BiConsumer<Access, Long>)Access::setAccessId);
		attributeGetterFunctions.put("categoryId", Access::getCategoryId);
		attributeSetterBiConsumers.put(
			"categoryId", (BiConsumer<Access, Long>)Access::setCategoryId);
		attributeGetterFunctions.put("title", Access::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Access, String>)Access::setTitle);
		attributeGetterFunctions.put("type", Access::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<Access, Integer>)Access::setType);
		attributeGetterFunctions.put("externalUrl", Access::getExternalUrl);
		attributeSetterBiConsumers.put(
			"externalUrl", (BiConsumer<Access, String>)Access::setExternalUrl);
		attributeGetterFunctions.put("folderId", Access::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId", (BiConsumer<Access, Long>)Access::setFolderId);
		attributeGetterFunctions.put("fileId", Access::getFileId);
		attributeSetterBiConsumers.put(
			"fileId", (BiConsumer<Access, Long>)Access::setFileId);
		attributeGetterFunctions.put("thumbnailId", Access::getThumbnailId);
		attributeSetterBiConsumers.put(
			"thumbnailId", (BiConsumer<Access, Long>)Access::setThumbnailId);
		attributeGetterFunctions.put("position", Access::getPosition);
		attributeSetterBiConsumers.put(
			"position", (BiConsumer<Access, Integer>)Access::setPosition);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccessId() {
		return _accessId;
	}

	@Override
	public void setAccessId(long accessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accessId = accessId;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryId = categoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCategoryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("categoryId"));
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	@JSON
	@Override
	public String getExternalUrl() {
		if (_externalUrl == null) {
			return "";
		}
		else {
			return _externalUrl;
		}
	}

	@Override
	public void setExternalUrl(String externalUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalUrl = externalUrl;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folderId = folderId;
	}

	@JSON
	@Override
	public long getFileId() {
		return _fileId;
	}

	@Override
	public void setFileId(long fileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileId = fileId;
	}

	@JSON
	@Override
	public long getThumbnailId() {
		return _thumbnailId;
	}

	@Override
	public void setThumbnailId(long thumbnailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thumbnailId = thumbnailId;
	}

	@JSON
	@Override
	public int getPosition() {
		return _position;
	}

	@Override
	public void setPosition(int position) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_position = position;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Access.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Access toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Access>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccessImpl accessImpl = new AccessImpl();

		accessImpl.setUuid(getUuid());
		accessImpl.setAccessId(getAccessId());
		accessImpl.setCategoryId(getCategoryId());
		accessImpl.setTitle(getTitle());
		accessImpl.setType(getType());
		accessImpl.setExternalUrl(getExternalUrl());
		accessImpl.setFolderId(getFolderId());
		accessImpl.setFileId(getFileId());
		accessImpl.setThumbnailId(getThumbnailId());
		accessImpl.setPosition(getPosition());

		accessImpl.resetOriginalValues();

		return accessImpl;
	}

	@Override
	public Access cloneWithOriginalValues() {
		AccessImpl accessImpl = new AccessImpl();

		accessImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		accessImpl.setAccessId(this.<Long>getColumnOriginalValue("accessId"));
		accessImpl.setCategoryId(
			this.<Long>getColumnOriginalValue("categoryId"));
		accessImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		accessImpl.setType(this.<Integer>getColumnOriginalValue("type_"));
		accessImpl.setExternalUrl(
			this.<String>getColumnOriginalValue("externalUrl"));
		accessImpl.setFolderId(this.<Long>getColumnOriginalValue("folderId"));
		accessImpl.setFileId(this.<Long>getColumnOriginalValue("fileId"));
		accessImpl.setThumbnailId(
			this.<Long>getColumnOriginalValue("thumbnailId"));
		accessImpl.setPosition(
			this.<Integer>getColumnOriginalValue("position"));

		return accessImpl;
	}

	@Override
	public int compareTo(Access access) {
		long primaryKey = access.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Access)) {
			return false;
		}

		Access access = (Access)object;

		long primaryKey = access.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Access> toCacheModel() {
		AccessCacheModel accessCacheModel = new AccessCacheModel();

		accessCacheModel.uuid = getUuid();

		String uuid = accessCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accessCacheModel.uuid = null;
		}

		accessCacheModel.accessId = getAccessId();

		accessCacheModel.categoryId = getCategoryId();

		accessCacheModel.title = getTitle();

		String title = accessCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			accessCacheModel.title = null;
		}

		accessCacheModel.type = getType();

		accessCacheModel.externalUrl = getExternalUrl();

		String externalUrl = accessCacheModel.externalUrl;

		if ((externalUrl != null) && (externalUrl.length() == 0)) {
			accessCacheModel.externalUrl = null;
		}

		accessCacheModel.folderId = getFolderId();

		accessCacheModel.fileId = getFileId();

		accessCacheModel.thumbnailId = getThumbnailId();

		accessCacheModel.position = getPosition();

		return accessCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Access, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Access, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Access, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Access)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Access>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Access.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accessId;
	private long _categoryId;
	private String _title;
	private int _type;
	private String _externalUrl;
	private long _folderId;
	private long _fileId;
	private long _thumbnailId;
	private int _position;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Access, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Access)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("accessId", _accessId);
		_columnOriginalValues.put("categoryId", _categoryId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("externalUrl", _externalUrl);
		_columnOriginalValues.put("folderId", _folderId);
		_columnOriginalValues.put("fileId", _fileId);
		_columnOriginalValues.put("thumbnailId", _thumbnailId);
		_columnOriginalValues.put("position", _position);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accessId", 2L);

		columnBitmasks.put("categoryId", 4L);

		columnBitmasks.put("title", 8L);

		columnBitmasks.put("type_", 16L);

		columnBitmasks.put("externalUrl", 32L);

		columnBitmasks.put("folderId", 64L);

		columnBitmasks.put("fileId", 128L);

		columnBitmasks.put("thumbnailId", 256L);

		columnBitmasks.put("position", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Access _escapedModel;

}