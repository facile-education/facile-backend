/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.facile.course.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.facile.course.model.StudentHomework;
import com.weprode.facile.course.model.StudentHomeworkModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StudentHomework service. Represents a row in the &quot;Course_StudentHomework&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StudentHomeworkModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentHomeworkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentHomeworkImpl
 * @generated
 */
public class StudentHomeworkModelImpl
	extends BaseModelImpl<StudentHomework> implements StudentHomeworkModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student homework model instance should use the <code>StudentHomework</code> interface instead.
	 */
	public static final String TABLE_NAME = "Course_StudentHomework";

	public static final Object[][] TABLE_COLUMNS = {
		{"studentHomeworkId", Types.BIGINT}, {"homeworkId", Types.BIGINT},
		{"studentId", Types.BIGINT}, {"isDone", Types.BOOLEAN},
		{"isSent", Types.BOOLEAN}, {"sentDate", Types.TIMESTAMP},
		{"sentFileId", Types.BIGINT}, {"isCorrected", Types.BOOLEAN},
		{"comment_", Types.VARCHAR}, {"correctionDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("studentHomeworkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("homeworkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isDone", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isSent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sentDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sentFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isCorrected", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("correctionDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Course_StudentHomework (studentHomeworkId LONG not null primary key,homeworkId LONG,studentId LONG,isDone BOOLEAN,isSent BOOLEAN,sentDate DATE null,sentFileId LONG,isCorrected BOOLEAN,comment_ VARCHAR(75) null,correctionDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table Course_StudentHomework";

	public static final String ORDER_BY_JPQL =
		" ORDER BY studentHomework.studentHomeworkId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Course_StudentHomework.studentHomeworkId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HOMEWORKID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTHOMEWORKID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StudentHomeworkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _studentHomeworkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentHomeworkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _studentHomeworkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StudentHomework.class;
	}

	@Override
	public String getModelClassName() {
		return StudentHomework.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StudentHomework, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StudentHomework, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentHomework, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StudentHomework)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StudentHomework, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StudentHomework, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StudentHomework)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StudentHomework, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StudentHomework, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<StudentHomework, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StudentHomework, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StudentHomework, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<StudentHomework, Object>>();
		Map<String, BiConsumer<StudentHomework, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StudentHomework, ?>>();

		attributeGetterFunctions.put(
			"studentHomeworkId", StudentHomework::getStudentHomeworkId);
		attributeSetterBiConsumers.put(
			"studentHomeworkId",
			(BiConsumer<StudentHomework, Long>)
				StudentHomework::setStudentHomeworkId);
		attributeGetterFunctions.put(
			"homeworkId", StudentHomework::getHomeworkId);
		attributeSetterBiConsumers.put(
			"homeworkId",
			(BiConsumer<StudentHomework, Long>)StudentHomework::setHomeworkId);
		attributeGetterFunctions.put(
			"studentId", StudentHomework::getStudentId);
		attributeSetterBiConsumers.put(
			"studentId",
			(BiConsumer<StudentHomework, Long>)StudentHomework::setStudentId);
		attributeGetterFunctions.put("isDone", StudentHomework::getIsDone);
		attributeSetterBiConsumers.put(
			"isDone",
			(BiConsumer<StudentHomework, Boolean>)StudentHomework::setIsDone);
		attributeGetterFunctions.put("isSent", StudentHomework::getIsSent);
		attributeSetterBiConsumers.put(
			"isSent",
			(BiConsumer<StudentHomework, Boolean>)StudentHomework::setIsSent);
		attributeGetterFunctions.put("sentDate", StudentHomework::getSentDate);
		attributeSetterBiConsumers.put(
			"sentDate",
			(BiConsumer<StudentHomework, Date>)StudentHomework::setSentDate);
		attributeGetterFunctions.put(
			"sentFileId", StudentHomework::getSentFileId);
		attributeSetterBiConsumers.put(
			"sentFileId",
			(BiConsumer<StudentHomework, Long>)StudentHomework::setSentFileId);
		attributeGetterFunctions.put(
			"isCorrected", StudentHomework::getIsCorrected);
		attributeSetterBiConsumers.put(
			"isCorrected",
			(BiConsumer<StudentHomework, Boolean>)
				StudentHomework::setIsCorrected);
		attributeGetterFunctions.put("comment", StudentHomework::getComment);
		attributeSetterBiConsumers.put(
			"comment",
			(BiConsumer<StudentHomework, String>)StudentHomework::setComment);
		attributeGetterFunctions.put(
			"correctionDate", StudentHomework::getCorrectionDate);
		attributeSetterBiConsumers.put(
			"correctionDate",
			(BiConsumer<StudentHomework, Date>)
				StudentHomework::setCorrectionDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStudentHomeworkId() {
		return _studentHomeworkId;
	}

	@Override
	public void setStudentHomeworkId(long studentHomeworkId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentHomeworkId = studentHomeworkId;
	}

	@Override
	public long getHomeworkId() {
		return _homeworkId;
	}

	@Override
	public void setHomeworkId(long homeworkId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeworkId = homeworkId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHomeworkId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("homeworkId"));
	}

	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentId = studentId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalStudentId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("studentId"));
	}

	@Override
	public boolean getIsDone() {
		return _isDone;
	}

	@Override
	public boolean isIsDone() {
		return _isDone;
	}

	@Override
	public void setIsDone(boolean isDone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isDone = isDone;
	}

	@Override
	public boolean getIsSent() {
		return _isSent;
	}

	@Override
	public boolean isIsSent() {
		return _isSent;
	}

	@Override
	public void setIsSent(boolean isSent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isSent = isSent;
	}

	@Override
	public Date getSentDate() {
		return _sentDate;
	}

	@Override
	public void setSentDate(Date sentDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sentDate = sentDate;
	}

	@Override
	public long getSentFileId() {
		return _sentFileId;
	}

	@Override
	public void setSentFileId(long sentFileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sentFileId = sentFileId;
	}

	@Override
	public boolean getIsCorrected() {
		return _isCorrected;
	}

	@Override
	public boolean isIsCorrected() {
		return _isCorrected;
	}

	@Override
	public void setIsCorrected(boolean isCorrected) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isCorrected = isCorrected;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comment = comment;
	}

	@Override
	public Date getCorrectionDate() {
		return _correctionDate;
	}

	@Override
	public void setCorrectionDate(Date correctionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_correctionDate = correctionDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StudentHomework.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StudentHomework toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StudentHomework>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentHomeworkImpl studentHomeworkImpl = new StudentHomeworkImpl();

		studentHomeworkImpl.setStudentHomeworkId(getStudentHomeworkId());
		studentHomeworkImpl.setHomeworkId(getHomeworkId());
		studentHomeworkImpl.setStudentId(getStudentId());
		studentHomeworkImpl.setIsDone(isIsDone());
		studentHomeworkImpl.setIsSent(isIsSent());
		studentHomeworkImpl.setSentDate(getSentDate());
		studentHomeworkImpl.setSentFileId(getSentFileId());
		studentHomeworkImpl.setIsCorrected(isIsCorrected());
		studentHomeworkImpl.setComment(getComment());
		studentHomeworkImpl.setCorrectionDate(getCorrectionDate());

		studentHomeworkImpl.resetOriginalValues();

		return studentHomeworkImpl;
	}

	@Override
	public StudentHomework cloneWithOriginalValues() {
		StudentHomeworkImpl studentHomeworkImpl = new StudentHomeworkImpl();

		studentHomeworkImpl.setStudentHomeworkId(
			this.<Long>getColumnOriginalValue("studentHomeworkId"));
		studentHomeworkImpl.setHomeworkId(
			this.<Long>getColumnOriginalValue("homeworkId"));
		studentHomeworkImpl.setStudentId(
			this.<Long>getColumnOriginalValue("studentId"));
		studentHomeworkImpl.setIsDone(
			this.<Boolean>getColumnOriginalValue("isDone"));
		studentHomeworkImpl.setIsSent(
			this.<Boolean>getColumnOriginalValue("isSent"));
		studentHomeworkImpl.setSentDate(
			this.<Date>getColumnOriginalValue("sentDate"));
		studentHomeworkImpl.setSentFileId(
			this.<Long>getColumnOriginalValue("sentFileId"));
		studentHomeworkImpl.setIsCorrected(
			this.<Boolean>getColumnOriginalValue("isCorrected"));
		studentHomeworkImpl.setComment(
			this.<String>getColumnOriginalValue("comment_"));
		studentHomeworkImpl.setCorrectionDate(
			this.<Date>getColumnOriginalValue("correctionDate"));

		return studentHomeworkImpl;
	}

	@Override
	public int compareTo(StudentHomework studentHomework) {
		long primaryKey = studentHomework.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StudentHomework)) {
			return false;
		}

		StudentHomework studentHomework = (StudentHomework)object;

		long primaryKey = studentHomework.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<StudentHomework> toCacheModel() {
		StudentHomeworkCacheModel studentHomeworkCacheModel =
			new StudentHomeworkCacheModel();

		studentHomeworkCacheModel.studentHomeworkId = getStudentHomeworkId();

		studentHomeworkCacheModel.homeworkId = getHomeworkId();

		studentHomeworkCacheModel.studentId = getStudentId();

		studentHomeworkCacheModel.isDone = isIsDone();

		studentHomeworkCacheModel.isSent = isIsSent();

		Date sentDate = getSentDate();

		if (sentDate != null) {
			studentHomeworkCacheModel.sentDate = sentDate.getTime();
		}
		else {
			studentHomeworkCacheModel.sentDate = Long.MIN_VALUE;
		}

		studentHomeworkCacheModel.sentFileId = getSentFileId();

		studentHomeworkCacheModel.isCorrected = isIsCorrected();

		studentHomeworkCacheModel.comment = getComment();

		String comment = studentHomeworkCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			studentHomeworkCacheModel.comment = null;
		}

		Date correctionDate = getCorrectionDate();

		if (correctionDate != null) {
			studentHomeworkCacheModel.correctionDate = correctionDate.getTime();
		}
		else {
			studentHomeworkCacheModel.correctionDate = Long.MIN_VALUE;
		}

		return studentHomeworkCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StudentHomework, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StudentHomework, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentHomework, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((StudentHomework)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StudentHomework>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					StudentHomework.class, ModelWrapper.class);

	}

	private long _studentHomeworkId;
	private long _homeworkId;
	private long _studentId;
	private boolean _isDone;
	private boolean _isSent;
	private Date _sentDate;
	private long _sentFileId;
	private boolean _isCorrected;
	private String _comment;
	private Date _correctionDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<StudentHomework, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((StudentHomework)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("studentHomeworkId", _studentHomeworkId);
		_columnOriginalValues.put("homeworkId", _homeworkId);
		_columnOriginalValues.put("studentId", _studentId);
		_columnOriginalValues.put("isDone", _isDone);
		_columnOriginalValues.put("isSent", _isSent);
		_columnOriginalValues.put("sentDate", _sentDate);
		_columnOriginalValues.put("sentFileId", _sentFileId);
		_columnOriginalValues.put("isCorrected", _isCorrected);
		_columnOriginalValues.put("comment_", _comment);
		_columnOriginalValues.put("correctionDate", _correctionDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("comment_", "comment");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("studentHomeworkId", 1L);

		columnBitmasks.put("homeworkId", 2L);

		columnBitmasks.put("studentId", 4L);

		columnBitmasks.put("isDone", 8L);

		columnBitmasks.put("isSent", 16L);

		columnBitmasks.put("sentDate", 32L);

		columnBitmasks.put("sentFileId", 64L);

		columnBitmasks.put("isCorrected", 128L);

		columnBitmasks.put("comment_", 256L);

		columnBitmasks.put("correctionDate", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private StudentHomework _escapedModel;

}