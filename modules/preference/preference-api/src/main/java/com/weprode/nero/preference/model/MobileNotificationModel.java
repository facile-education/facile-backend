/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.preference.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the MobileNotification service. Represents a row in the &quot;Preference_MobileNotification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.weprode.nero.preference.model.impl.MobileNotificationModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.weprode.nero.preference.model.impl.MobileNotificationImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MobileNotification
 * @generated
 */
@ProviderType
public interface MobileNotificationModel extends BaseModel<MobileNotification> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a mobile notification model instance should use the {@link MobileNotification} interface instead.
	 */

	/**
	 * Returns the primary key of this mobile notification.
	 *
	 * @return the primary key of this mobile notification
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this mobile notification.
	 *
	 * @param primaryKey the primary key of this mobile notification
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the mobile notification ID of this mobile notification.
	 *
	 * @return the mobile notification ID of this mobile notification
	 */
	public long getMobileNotificationId();

	/**
	 * Sets the mobile notification ID of this mobile notification.
	 *
	 * @param mobileNotificationId the mobile notification ID of this mobile notification
	 */
	public void setMobileNotificationId(long mobileNotificationId);

	/**
	 * Returns the user ID of this mobile notification.
	 *
	 * @return the user ID of this mobile notification
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this mobile notification.
	 *
	 * @param userId the user ID of this mobile notification
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this mobile notification.
	 *
	 * @return the user uuid of this mobile notification
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this mobile notification.
	 *
	 * @param userUuid the user uuid of this mobile notification
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the etab ID of this mobile notification.
	 *
	 * @return the etab ID of this mobile notification
	 */
	public long getEtabId();

	/**
	 * Sets the etab ID of this mobile notification.
	 *
	 * @param etabId the etab ID of this mobile notification
	 */
	public void setEtabId(long etabId);

	/**
	 * Returns the enable of this mobile notification.
	 *
	 * @return the enable of this mobile notification
	 */
	public boolean getEnable();

	/**
	 * Returns <code>true</code> if this mobile notification is enable.
	 *
	 * @return <code>true</code> if this mobile notification is enable; <code>false</code> otherwise
	 */
	public boolean isEnable();

	/**
	 * Sets whether this mobile notification is enable.
	 *
	 * @param enable the enable of this mobile notification
	 */
	public void setEnable(boolean enable);

	/**
	 * Returns the token of this mobile notification.
	 *
	 * @return the token of this mobile notification
	 */
	@AutoEscape
	public String getToken();

	/**
	 * Sets the token of this mobile notification.
	 *
	 * @param token the token of this mobile notification
	 */
	public void setToken(String token);

	/**
	 * Returns the device of this mobile notification.
	 *
	 * @return the device of this mobile notification
	 */
	@AutoEscape
	public String getDevice();

	/**
	 * Sets the device of this mobile notification.
	 *
	 * @param device the device of this mobile notification
	 */
	public void setDevice(String device);

	@Override
	public MobileNotification cloneWithOriginalValues();

}