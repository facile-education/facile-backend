/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.application.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.application.model.Application;
import com.weprode.nero.application.model.ApplicationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Application service. Represents a row in the &quot;Application_Application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class ApplicationModelImpl
	extends BaseModelImpl<Application> implements ApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application model instance should use the <code>Application</code> interface instead.
	 */
	public static final String TABLE_NAME = "Application_Application";

	public static final Object[][] TABLE_COLUMNS = {
		{"applicationId", Types.BIGINT}, {"applicationName", Types.VARCHAR},
		{"applicationKey", Types.VARCHAR}, {"categoryName", Types.VARCHAR},
		{"image", Types.VARCHAR}, {"hasCustomUrl", Types.BOOLEAN},
		{"hasGlobalUrl", Types.BOOLEAN}, {"globalUrl", Types.VARCHAR},
		{"exportUser", Types.BOOLEAN}, {"exportParent", Types.BOOLEAN},
		{"exportStudent", Types.BOOLEAN}, {"exportTeacher", Types.BOOLEAN},
		{"exportOther", Types.BOOLEAN}, {"menuEntryId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("applicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasCustomUrl", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hasGlobalUrl", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("globalUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exportUser", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("exportParent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("exportStudent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("exportTeacher", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("exportOther", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("menuEntryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Application_Application (applicationId LONG not null primary key,applicationName VARCHAR(75) null,applicationKey VARCHAR(75) null,categoryName VARCHAR(75) null,image STRING null,hasCustomUrl BOOLEAN,hasGlobalUrl BOOLEAN,globalUrl VARCHAR(200) null,exportUser BOOLEAN,exportParent BOOLEAN,exportStudent BOOLEAN,exportTeacher BOOLEAN,exportOther BOOLEAN,menuEntryId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table Application_Application";

	public static final String ORDER_BY_JPQL =
		" ORDER BY application.applicationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Application_Application.applicationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONKEY_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Application.class;
	}

	@Override
	public String getModelClassName() {
		return Application.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Application, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Application, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Application, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Application)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Application, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Application, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Application)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Application, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Application, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Application, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Application, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Application, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Application, Object>>();
		Map<String, BiConsumer<Application, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Application, ?>>();

		attributeGetterFunctions.put(
			"applicationId", Application::getApplicationId);
		attributeSetterBiConsumers.put(
			"applicationId",
			(BiConsumer<Application, Long>)Application::setApplicationId);
		attributeGetterFunctions.put(
			"applicationName", Application::getApplicationName);
		attributeSetterBiConsumers.put(
			"applicationName",
			(BiConsumer<Application, String>)Application::setApplicationName);
		attributeGetterFunctions.put(
			"applicationKey", Application::getApplicationKey);
		attributeSetterBiConsumers.put(
			"applicationKey",
			(BiConsumer<Application, String>)Application::setApplicationKey);
		attributeGetterFunctions.put(
			"categoryName", Application::getCategoryName);
		attributeSetterBiConsumers.put(
			"categoryName",
			(BiConsumer<Application, String>)Application::setCategoryName);
		attributeGetterFunctions.put("image", Application::getImage);
		attributeSetterBiConsumers.put(
			"image", (BiConsumer<Application, String>)Application::setImage);
		attributeGetterFunctions.put(
			"hasCustomUrl", Application::getHasCustomUrl);
		attributeSetterBiConsumers.put(
			"hasCustomUrl",
			(BiConsumer<Application, Boolean>)Application::setHasCustomUrl);
		attributeGetterFunctions.put(
			"hasGlobalUrl", Application::getHasGlobalUrl);
		attributeSetterBiConsumers.put(
			"hasGlobalUrl",
			(BiConsumer<Application, Boolean>)Application::setHasGlobalUrl);
		attributeGetterFunctions.put("globalUrl", Application::getGlobalUrl);
		attributeSetterBiConsumers.put(
			"globalUrl",
			(BiConsumer<Application, String>)Application::setGlobalUrl);
		attributeGetterFunctions.put("exportUser", Application::getExportUser);
		attributeSetterBiConsumers.put(
			"exportUser",
			(BiConsumer<Application, Boolean>)Application::setExportUser);
		attributeGetterFunctions.put(
			"exportParent", Application::getExportParent);
		attributeSetterBiConsumers.put(
			"exportParent",
			(BiConsumer<Application, Boolean>)Application::setExportParent);
		attributeGetterFunctions.put(
			"exportStudent", Application::getExportStudent);
		attributeSetterBiConsumers.put(
			"exportStudent",
			(BiConsumer<Application, Boolean>)Application::setExportStudent);
		attributeGetterFunctions.put(
			"exportTeacher", Application::getExportTeacher);
		attributeSetterBiConsumers.put(
			"exportTeacher",
			(BiConsumer<Application, Boolean>)Application::setExportTeacher);
		attributeGetterFunctions.put(
			"exportOther", Application::getExportOther);
		attributeSetterBiConsumers.put(
			"exportOther",
			(BiConsumer<Application, Boolean>)Application::setExportOther);
		attributeGetterFunctions.put(
			"menuEntryId", Application::getMenuEntryId);
		attributeSetterBiConsumers.put(
			"menuEntryId",
			(BiConsumer<Application, Long>)Application::setMenuEntryId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getApplicationId() {
		return _applicationId;
	}

	@Override
	public void setApplicationId(long applicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationId = applicationId;
	}

	@JSON
	@Override
	public String getApplicationName() {
		if (_applicationName == null) {
			return "";
		}
		else {
			return _applicationName;
		}
	}

	@Override
	public void setApplicationName(String applicationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationName = applicationName;
	}

	@JSON
	@Override
	public String getApplicationKey() {
		if (_applicationKey == null) {
			return "";
		}
		else {
			return _applicationKey;
		}
	}

	@Override
	public void setApplicationKey(String applicationKey) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationKey = applicationKey;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationKey() {
		return getColumnOriginalValue("applicationKey");
	}

	@JSON
	@Override
	public String getCategoryName() {
		if (_categoryName == null) {
			return "";
		}
		else {
			return _categoryName;
		}
	}

	@Override
	public void setCategoryName(String categoryName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryName = categoryName;
	}

	@JSON
	@Override
	public String getImage() {
		if (_image == null) {
			return "";
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_image = image;
	}

	@JSON
	@Override
	public boolean getHasCustomUrl() {
		return _hasCustomUrl;
	}

	@JSON
	@Override
	public boolean isHasCustomUrl() {
		return _hasCustomUrl;
	}

	@Override
	public void setHasCustomUrl(boolean hasCustomUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasCustomUrl = hasCustomUrl;
	}

	@JSON
	@Override
	public boolean getHasGlobalUrl() {
		return _hasGlobalUrl;
	}

	@JSON
	@Override
	public boolean isHasGlobalUrl() {
		return _hasGlobalUrl;
	}

	@Override
	public void setHasGlobalUrl(boolean hasGlobalUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasGlobalUrl = hasGlobalUrl;
	}

	@JSON
	@Override
	public String getGlobalUrl() {
		if (_globalUrl == null) {
			return "";
		}
		else {
			return _globalUrl;
		}
	}

	@Override
	public void setGlobalUrl(String globalUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_globalUrl = globalUrl;
	}

	@JSON
	@Override
	public boolean getExportUser() {
		return _exportUser;
	}

	@JSON
	@Override
	public boolean isExportUser() {
		return _exportUser;
	}

	@Override
	public void setExportUser(boolean exportUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exportUser = exportUser;
	}

	@JSON
	@Override
	public boolean getExportParent() {
		return _exportParent;
	}

	@JSON
	@Override
	public boolean isExportParent() {
		return _exportParent;
	}

	@Override
	public void setExportParent(boolean exportParent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exportParent = exportParent;
	}

	@JSON
	@Override
	public boolean getExportStudent() {
		return _exportStudent;
	}

	@JSON
	@Override
	public boolean isExportStudent() {
		return _exportStudent;
	}

	@Override
	public void setExportStudent(boolean exportStudent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exportStudent = exportStudent;
	}

	@JSON
	@Override
	public boolean getExportTeacher() {
		return _exportTeacher;
	}

	@JSON
	@Override
	public boolean isExportTeacher() {
		return _exportTeacher;
	}

	@Override
	public void setExportTeacher(boolean exportTeacher) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exportTeacher = exportTeacher;
	}

	@JSON
	@Override
	public boolean getExportOther() {
		return _exportOther;
	}

	@JSON
	@Override
	public boolean isExportOther() {
		return _exportOther;
	}

	@Override
	public void setExportOther(boolean exportOther) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exportOther = exportOther;
	}

	@JSON
	@Override
	public long getMenuEntryId() {
		return _menuEntryId;
	}

	@Override
	public void setMenuEntryId(long menuEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_menuEntryId = menuEntryId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Application.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Application toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Application>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicationImpl applicationImpl = new ApplicationImpl();

		applicationImpl.setApplicationId(getApplicationId());
		applicationImpl.setApplicationName(getApplicationName());
		applicationImpl.setApplicationKey(getApplicationKey());
		applicationImpl.setCategoryName(getCategoryName());
		applicationImpl.setImage(getImage());
		applicationImpl.setHasCustomUrl(isHasCustomUrl());
		applicationImpl.setHasGlobalUrl(isHasGlobalUrl());
		applicationImpl.setGlobalUrl(getGlobalUrl());
		applicationImpl.setExportUser(isExportUser());
		applicationImpl.setExportParent(isExportParent());
		applicationImpl.setExportStudent(isExportStudent());
		applicationImpl.setExportTeacher(isExportTeacher());
		applicationImpl.setExportOther(isExportOther());
		applicationImpl.setMenuEntryId(getMenuEntryId());

		applicationImpl.resetOriginalValues();

		return applicationImpl;
	}

	@Override
	public Application cloneWithOriginalValues() {
		ApplicationImpl applicationImpl = new ApplicationImpl();

		applicationImpl.setApplicationId(
			this.<Long>getColumnOriginalValue("applicationId"));
		applicationImpl.setApplicationName(
			this.<String>getColumnOriginalValue("applicationName"));
		applicationImpl.setApplicationKey(
			this.<String>getColumnOriginalValue("applicationKey"));
		applicationImpl.setCategoryName(
			this.<String>getColumnOriginalValue("categoryName"));
		applicationImpl.setImage(this.<String>getColumnOriginalValue("image"));
		applicationImpl.setHasCustomUrl(
			this.<Boolean>getColumnOriginalValue("hasCustomUrl"));
		applicationImpl.setHasGlobalUrl(
			this.<Boolean>getColumnOriginalValue("hasGlobalUrl"));
		applicationImpl.setGlobalUrl(
			this.<String>getColumnOriginalValue("globalUrl"));
		applicationImpl.setExportUser(
			this.<Boolean>getColumnOriginalValue("exportUser"));
		applicationImpl.setExportParent(
			this.<Boolean>getColumnOriginalValue("exportParent"));
		applicationImpl.setExportStudent(
			this.<Boolean>getColumnOriginalValue("exportStudent"));
		applicationImpl.setExportTeacher(
			this.<Boolean>getColumnOriginalValue("exportTeacher"));
		applicationImpl.setExportOther(
			this.<Boolean>getColumnOriginalValue("exportOther"));
		applicationImpl.setMenuEntryId(
			this.<Long>getColumnOriginalValue("menuEntryId"));

		return applicationImpl;
	}

	@Override
	public int compareTo(Application application) {
		long primaryKey = application.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Application)) {
			return false;
		}

		Application application = (Application)object;

		long primaryKey = application.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Application> toCacheModel() {
		ApplicationCacheModel applicationCacheModel =
			new ApplicationCacheModel();

		applicationCacheModel.applicationId = getApplicationId();

		applicationCacheModel.applicationName = getApplicationName();

		String applicationName = applicationCacheModel.applicationName;

		if ((applicationName != null) && (applicationName.length() == 0)) {
			applicationCacheModel.applicationName = null;
		}

		applicationCacheModel.applicationKey = getApplicationKey();

		String applicationKey = applicationCacheModel.applicationKey;

		if ((applicationKey != null) && (applicationKey.length() == 0)) {
			applicationCacheModel.applicationKey = null;
		}

		applicationCacheModel.categoryName = getCategoryName();

		String categoryName = applicationCacheModel.categoryName;

		if ((categoryName != null) && (categoryName.length() == 0)) {
			applicationCacheModel.categoryName = null;
		}

		applicationCacheModel.image = getImage();

		String image = applicationCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			applicationCacheModel.image = null;
		}

		applicationCacheModel.hasCustomUrl = isHasCustomUrl();

		applicationCacheModel.hasGlobalUrl = isHasGlobalUrl();

		applicationCacheModel.globalUrl = getGlobalUrl();

		String globalUrl = applicationCacheModel.globalUrl;

		if ((globalUrl != null) && (globalUrl.length() == 0)) {
			applicationCacheModel.globalUrl = null;
		}

		applicationCacheModel.exportUser = isExportUser();

		applicationCacheModel.exportParent = isExportParent();

		applicationCacheModel.exportStudent = isExportStudent();

		applicationCacheModel.exportTeacher = isExportTeacher();

		applicationCacheModel.exportOther = isExportOther();

		applicationCacheModel.menuEntryId = getMenuEntryId();

		return applicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Application, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Application, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Application, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Application)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Application>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Application.class, ModelWrapper.class);

	}

	private long _applicationId;
	private String _applicationName;
	private String _applicationKey;
	private String _categoryName;
	private String _image;
	private boolean _hasCustomUrl;
	private boolean _hasGlobalUrl;
	private String _globalUrl;
	private boolean _exportUser;
	private boolean _exportParent;
	private boolean _exportStudent;
	private boolean _exportTeacher;
	private boolean _exportOther;
	private long _menuEntryId;

	public <T> T getColumnValue(String columnName) {
		Function<Application, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Application)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("applicationId", _applicationId);
		_columnOriginalValues.put("applicationName", _applicationName);
		_columnOriginalValues.put("applicationKey", _applicationKey);
		_columnOriginalValues.put("categoryName", _categoryName);
		_columnOriginalValues.put("image", _image);
		_columnOriginalValues.put("hasCustomUrl", _hasCustomUrl);
		_columnOriginalValues.put("hasGlobalUrl", _hasGlobalUrl);
		_columnOriginalValues.put("globalUrl", _globalUrl);
		_columnOriginalValues.put("exportUser", _exportUser);
		_columnOriginalValues.put("exportParent", _exportParent);
		_columnOriginalValues.put("exportStudent", _exportStudent);
		_columnOriginalValues.put("exportTeacher", _exportTeacher);
		_columnOriginalValues.put("exportOther", _exportOther);
		_columnOriginalValues.put("menuEntryId", _menuEntryId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("applicationId", 1L);

		columnBitmasks.put("applicationName", 2L);

		columnBitmasks.put("applicationKey", 4L);

		columnBitmasks.put("categoryName", 8L);

		columnBitmasks.put("image", 16L);

		columnBitmasks.put("hasCustomUrl", 32L);

		columnBitmasks.put("hasGlobalUrl", 64L);

		columnBitmasks.put("globalUrl", 128L);

		columnBitmasks.put("exportUser", 256L);

		columnBitmasks.put("exportParent", 512L);

		columnBitmasks.put("exportStudent", 1024L);

		columnBitmasks.put("exportTeacher", 2048L);

		columnBitmasks.put("exportOther", 4096L);

		columnBitmasks.put("menuEntryId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Application _escapedModel;

}