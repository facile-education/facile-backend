/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.progression.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.progression.model.ProgressionFolder;
import com.weprode.nero.progression.model.ProgressionFolderModel;
import com.weprode.nero.progression.model.ProgressionFolderSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProgressionFolder service. Represents a row in the &quot;Progression_ProgressionFolder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProgressionFolderModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProgressionFolderImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProgressionFolderImpl
 * @generated
 */
@JSON(strict = true)
public class ProgressionFolderModelImpl
	extends BaseModelImpl<ProgressionFolder> implements ProgressionFolderModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a progression folder model instance should use the <code>ProgressionFolder</code> interface instead.
	 */
	public static final String TABLE_NAME = "Progression_ProgressionFolder";

	public static final Object[][] TABLE_COLUMNS = {
		{"progressionFolderId", Types.BIGINT}, {"progressionId", Types.BIGINT},
		{"parentFolderId", Types.BIGINT}, {"folderName", Types.VARCHAR},
		{"order_", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("progressionFolderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("progressionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentFolderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("order_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Progression_ProgressionFolder (progressionFolderId LONG not null primary key,progressionId LONG,parentFolderId LONG,folderName VARCHAR(75) null,order_ INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table Progression_ProgressionFolder";

	public static final String ORDER_BY_JPQL =
		" ORDER BY progressionFolder.order ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Progression_ProgressionFolder.order_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PARENTFOLDERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRESSIONFOLDERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRESSIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORDER_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ProgressionFolder toModel(ProgressionFolderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProgressionFolder model = new ProgressionFolderImpl();

		model.setProgressionFolderId(soapModel.getProgressionFolderId());
		model.setProgressionId(soapModel.getProgressionId());
		model.setParentFolderId(soapModel.getParentFolderId());
		model.setFolderName(soapModel.getFolderName());
		model.setOrder(soapModel.getOrder());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ProgressionFolder> toModels(
		ProgressionFolderSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ProgressionFolder> models = new ArrayList<ProgressionFolder>(
			soapModels.length);

		for (ProgressionFolderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ProgressionFolderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _progressionFolderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProgressionFolderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _progressionFolderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProgressionFolder.class;
	}

	@Override
	public String getModelClassName() {
		return ProgressionFolder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProgressionFolder, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProgressionFolder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProgressionFolder, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProgressionFolder)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProgressionFolder, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProgressionFolder, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProgressionFolder)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProgressionFolder, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProgressionFolder, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ProgressionFolder>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ProgressionFolder.class.getClassLoader(), ProgressionFolder.class,
			ModelWrapper.class);

		try {
			Constructor<ProgressionFolder> constructor =
				(Constructor<ProgressionFolder>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ProgressionFolder, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProgressionFolder, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProgressionFolder, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ProgressionFolder, Object>>();
		Map<String, BiConsumer<ProgressionFolder, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ProgressionFolder, ?>>();

		attributeGetterFunctions.put(
			"progressionFolderId", ProgressionFolder::getProgressionFolderId);
		attributeSetterBiConsumers.put(
			"progressionFolderId",
			(BiConsumer<ProgressionFolder, Long>)
				ProgressionFolder::setProgressionFolderId);
		attributeGetterFunctions.put(
			"progressionId", ProgressionFolder::getProgressionId);
		attributeSetterBiConsumers.put(
			"progressionId",
			(BiConsumer<ProgressionFolder, Long>)
				ProgressionFolder::setProgressionId);
		attributeGetterFunctions.put(
			"parentFolderId", ProgressionFolder::getParentFolderId);
		attributeSetterBiConsumers.put(
			"parentFolderId",
			(BiConsumer<ProgressionFolder, Long>)
				ProgressionFolder::setParentFolderId);
		attributeGetterFunctions.put(
			"folderName", ProgressionFolder::getFolderName);
		attributeSetterBiConsumers.put(
			"folderName",
			(BiConsumer<ProgressionFolder, String>)
				ProgressionFolder::setFolderName);
		attributeGetterFunctions.put("order", ProgressionFolder::getOrder);
		attributeSetterBiConsumers.put(
			"order",
			(BiConsumer<ProgressionFolder, Integer>)
				ProgressionFolder::setOrder);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getProgressionFolderId() {
		return _progressionFolderId;
	}

	@Override
	public void setProgressionFolderId(long progressionFolderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_progressionFolderId = progressionFolderId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProgressionFolderId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("progressionFolderId"));
	}

	@JSON
	@Override
	public long getProgressionId() {
		return _progressionId;
	}

	@Override
	public void setProgressionId(long progressionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_progressionId = progressionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProgressionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("progressionId"));
	}

	@JSON
	@Override
	public long getParentFolderId() {
		return _parentFolderId;
	}

	@Override
	public void setParentFolderId(long parentFolderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentFolderId = parentFolderId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalParentFolderId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("parentFolderId"));
	}

	@JSON
	@Override
	public String getFolderName() {
		if (_folderName == null) {
			return "";
		}
		else {
			return _folderName;
		}
	}

	@Override
	public void setFolderName(String folderName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folderName = folderName;
	}

	@JSON
	@Override
	public int getOrder() {
		return _order;
	}

	@Override
	public void setOrder(int order) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_order = order;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ProgressionFolder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProgressionFolder toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProgressionFolder>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProgressionFolderImpl progressionFolderImpl =
			new ProgressionFolderImpl();

		progressionFolderImpl.setProgressionFolderId(getProgressionFolderId());
		progressionFolderImpl.setProgressionId(getProgressionId());
		progressionFolderImpl.setParentFolderId(getParentFolderId());
		progressionFolderImpl.setFolderName(getFolderName());
		progressionFolderImpl.setOrder(getOrder());

		progressionFolderImpl.resetOriginalValues();

		return progressionFolderImpl;
	}

	@Override
	public ProgressionFolder cloneWithOriginalValues() {
		ProgressionFolderImpl progressionFolderImpl =
			new ProgressionFolderImpl();

		progressionFolderImpl.setProgressionFolderId(
			this.<Long>getColumnOriginalValue("progressionFolderId"));
		progressionFolderImpl.setProgressionId(
			this.<Long>getColumnOriginalValue("progressionId"));
		progressionFolderImpl.setParentFolderId(
			this.<Long>getColumnOriginalValue("parentFolderId"));
		progressionFolderImpl.setFolderName(
			this.<String>getColumnOriginalValue("folderName"));
		progressionFolderImpl.setOrder(
			this.<Integer>getColumnOriginalValue("order_"));

		return progressionFolderImpl;
	}

	@Override
	public int compareTo(ProgressionFolder progressionFolder) {
		int value = 0;

		if (getOrder() < progressionFolder.getOrder()) {
			value = -1;
		}
		else if (getOrder() > progressionFolder.getOrder()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProgressionFolder)) {
			return false;
		}

		ProgressionFolder progressionFolder = (ProgressionFolder)object;

		long primaryKey = progressionFolder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProgressionFolder> toCacheModel() {
		ProgressionFolderCacheModel progressionFolderCacheModel =
			new ProgressionFolderCacheModel();

		progressionFolderCacheModel.progressionFolderId =
			getProgressionFolderId();

		progressionFolderCacheModel.progressionId = getProgressionId();

		progressionFolderCacheModel.parentFolderId = getParentFolderId();

		progressionFolderCacheModel.folderName = getFolderName();

		String folderName = progressionFolderCacheModel.folderName;

		if ((folderName != null) && (folderName.length() == 0)) {
			progressionFolderCacheModel.folderName = null;
		}

		progressionFolderCacheModel.order = getOrder();

		return progressionFolderCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProgressionFolder, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProgressionFolder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProgressionFolder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ProgressionFolder)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ProgressionFolder, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ProgressionFolder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProgressionFolder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ProgressionFolder)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProgressionFolder>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _progressionFolderId;
	private long _progressionId;
	private long _parentFolderId;
	private String _folderName;
	private int _order;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ProgressionFolder, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ProgressionFolder)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("progressionFolderId", _progressionFolderId);
		_columnOriginalValues.put("progressionId", _progressionId);
		_columnOriginalValues.put("parentFolderId", _parentFolderId);
		_columnOriginalValues.put("folderName", _folderName);
		_columnOriginalValues.put("order_", _order);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("order_", "order");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("progressionFolderId", 1L);

		columnBitmasks.put("progressionId", 2L);

		columnBitmasks.put("parentFolderId", 4L);

		columnBitmasks.put("folderName", 8L);

		columnBitmasks.put("order_", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ProgressionFolder _escapedModel;

}