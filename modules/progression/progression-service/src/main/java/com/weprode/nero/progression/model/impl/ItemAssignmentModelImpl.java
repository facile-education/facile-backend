/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.progression.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.progression.model.ItemAssignment;
import com.weprode.nero.progression.model.ItemAssignmentModel;
import com.weprode.nero.progression.model.ItemAssignmentSoap;
import com.weprode.nero.progression.service.persistence.ItemAssignmentPK;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ItemAssignment service. Represents a row in the &quot;Progression_ItemAssignment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ItemAssignmentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemAssignmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ItemAssignmentImpl
 * @generated
 */
@JSON(strict = true)
public class ItemAssignmentModelImpl
	extends BaseModelImpl<ItemAssignment> implements ItemAssignmentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item assignment model instance should use the <code>ItemAssignment</code> interface instead.
	 */
	public static final String TABLE_NAME = "Progression_ItemAssignment";

	public static final Object[][] TABLE_COLUMNS = {
		{"progressionItemId", Types.BIGINT}, {"sessionId", Types.BIGINT},
		{"homeworkId", Types.BIGINT}, {"assignedDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("progressionItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sessionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("homeworkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("assignedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Progression_ItemAssignment (progressionItemId LONG not null,sessionId LONG not null,homeworkId LONG,assignedDate DATE null,modifiedDate DATE null,primary key (progressionItemId, sessionId))";

	public static final String TABLE_SQL_DROP =
		"drop table Progression_ItemAssignment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY itemAssignment.id.progressionItemId ASC, itemAssignment.id.sessionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Progression_ItemAssignment.progressionItemId ASC, Progression_ItemAssignment.sessionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HOMEWORKID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRESSIONITEMID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SESSIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ItemAssignment toModel(ItemAssignmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ItemAssignment model = new ItemAssignmentImpl();

		model.setProgressionItemId(soapModel.getProgressionItemId());
		model.setSessionId(soapModel.getSessionId());
		model.setHomeworkId(soapModel.getHomeworkId());
		model.setAssignedDate(soapModel.getAssignedDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ItemAssignment> toModels(
		ItemAssignmentSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ItemAssignment> models = new ArrayList<ItemAssignment>(
			soapModels.length);

		for (ItemAssignmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ItemAssignmentModelImpl() {
	}

	@Override
	public ItemAssignmentPK getPrimaryKey() {
		return new ItemAssignmentPK(_progressionItemId, _sessionId);
	}

	@Override
	public void setPrimaryKey(ItemAssignmentPK primaryKey) {
		setProgressionItemId(primaryKey.progressionItemId);
		setSessionId(primaryKey.sessionId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ItemAssignmentPK(_progressionItemId, _sessionId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ItemAssignmentPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ItemAssignment.class;
	}

	@Override
	public String getModelClassName() {
		return ItemAssignment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ItemAssignment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ItemAssignment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ItemAssignment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ItemAssignment)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ItemAssignment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ItemAssignment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ItemAssignment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ItemAssignment, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ItemAssignment, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ItemAssignment>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ItemAssignment.class.getClassLoader(), ItemAssignment.class,
			ModelWrapper.class);

		try {
			Constructor<ItemAssignment> constructor =
				(Constructor<ItemAssignment>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ItemAssignment, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ItemAssignment, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ItemAssignment, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ItemAssignment, Object>>();
		Map<String, BiConsumer<ItemAssignment, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ItemAssignment, ?>>();

		attributeGetterFunctions.put(
			"progressionItemId", ItemAssignment::getProgressionItemId);
		attributeSetterBiConsumers.put(
			"progressionItemId",
			(BiConsumer<ItemAssignment, Long>)
				ItemAssignment::setProgressionItemId);
		attributeGetterFunctions.put("sessionId", ItemAssignment::getSessionId);
		attributeSetterBiConsumers.put(
			"sessionId",
			(BiConsumer<ItemAssignment, Long>)ItemAssignment::setSessionId);
		attributeGetterFunctions.put(
			"homeworkId", ItemAssignment::getHomeworkId);
		attributeSetterBiConsumers.put(
			"homeworkId",
			(BiConsumer<ItemAssignment, Long>)ItemAssignment::setHomeworkId);
		attributeGetterFunctions.put(
			"assignedDate", ItemAssignment::getAssignedDate);
		attributeSetterBiConsumers.put(
			"assignedDate",
			(BiConsumer<ItemAssignment, Date>)ItemAssignment::setAssignedDate);
		attributeGetterFunctions.put(
			"modifiedDate", ItemAssignment::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ItemAssignment, Date>)ItemAssignment::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getProgressionItemId() {
		return _progressionItemId;
	}

	@Override
	public void setProgressionItemId(long progressionItemId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_progressionItemId = progressionItemId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProgressionItemId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("progressionItemId"));
	}

	@JSON
	@Override
	public long getSessionId() {
		return _sessionId;
	}

	@Override
	public void setSessionId(long sessionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sessionId = sessionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSessionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sessionId"));
	}

	@JSON
	@Override
	public long getHomeworkId() {
		return _homeworkId;
	}

	@Override
	public void setHomeworkId(long homeworkId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeworkId = homeworkId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHomeworkId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("homeworkId"));
	}

	@JSON
	@Override
	public Date getAssignedDate() {
		return _assignedDate;
	}

	@Override
	public void setAssignedDate(Date assignedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assignedDate = assignedDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ItemAssignment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ItemAssignment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemAssignmentImpl itemAssignmentImpl = new ItemAssignmentImpl();

		itemAssignmentImpl.setProgressionItemId(getProgressionItemId());
		itemAssignmentImpl.setSessionId(getSessionId());
		itemAssignmentImpl.setHomeworkId(getHomeworkId());
		itemAssignmentImpl.setAssignedDate(getAssignedDate());
		itemAssignmentImpl.setModifiedDate(getModifiedDate());

		itemAssignmentImpl.resetOriginalValues();

		return itemAssignmentImpl;
	}

	@Override
	public ItemAssignment cloneWithOriginalValues() {
		ItemAssignmentImpl itemAssignmentImpl = new ItemAssignmentImpl();

		itemAssignmentImpl.setProgressionItemId(
			this.<Long>getColumnOriginalValue("progressionItemId"));
		itemAssignmentImpl.setSessionId(
			this.<Long>getColumnOriginalValue("sessionId"));
		itemAssignmentImpl.setHomeworkId(
			this.<Long>getColumnOriginalValue("homeworkId"));
		itemAssignmentImpl.setAssignedDate(
			this.<Date>getColumnOriginalValue("assignedDate"));
		itemAssignmentImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return itemAssignmentImpl;
	}

	@Override
	public int compareTo(ItemAssignment itemAssignment) {
		ItemAssignmentPK primaryKey = itemAssignment.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ItemAssignment)) {
			return false;
		}

		ItemAssignment itemAssignment = (ItemAssignment)object;

		ItemAssignmentPK primaryKey = itemAssignment.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ItemAssignment> toCacheModel() {
		ItemAssignmentCacheModel itemAssignmentCacheModel =
			new ItemAssignmentCacheModel();

		itemAssignmentCacheModel.itemAssignmentPK = getPrimaryKey();

		itemAssignmentCacheModel.progressionItemId = getProgressionItemId();

		itemAssignmentCacheModel.sessionId = getSessionId();

		itemAssignmentCacheModel.homeworkId = getHomeworkId();

		Date assignedDate = getAssignedDate();

		if (assignedDate != null) {
			itemAssignmentCacheModel.assignedDate = assignedDate.getTime();
		}
		else {
			itemAssignmentCacheModel.assignedDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			itemAssignmentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			itemAssignmentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return itemAssignmentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ItemAssignment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ItemAssignment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ItemAssignment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ItemAssignment)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ItemAssignment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ItemAssignment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ItemAssignment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ItemAssignment)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ItemAssignment>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _progressionItemId;
	private long _sessionId;
	private long _homeworkId;
	private Date _assignedDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<ItemAssignment, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ItemAssignment)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("progressionItemId", _progressionItemId);
		_columnOriginalValues.put("sessionId", _sessionId);
		_columnOriginalValues.put("homeworkId", _homeworkId);
		_columnOriginalValues.put("assignedDate", _assignedDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("progressionItemId", 1L);

		columnBitmasks.put("sessionId", 2L);

		columnBitmasks.put("homeworkId", 4L);

		columnBitmasks.put("assignedDate", 8L);

		columnBitmasks.put("modifiedDate", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ItemAssignment _escapedModel;

}