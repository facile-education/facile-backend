/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.progression.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.progression.model.Progression;
import com.weprode.nero.progression.model.ProgressionModel;
import com.weprode.nero.progression.model.ProgressionSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Progression service. Represents a row in the &quot;Progression_Progression&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProgressionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProgressionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProgressionImpl
 * @generated
 */
@JSON(strict = true)
public class ProgressionModelImpl
	extends BaseModelImpl<Progression> implements ProgressionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a progression model instance should use the <code>Progression</code> interface instead.
	 */
	public static final String TABLE_NAME = "Progression_Progression";

	public static final Object[][] TABLE_COLUMNS = {
		{"progressionId", Types.BIGINT}, {"teacherId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"volee", Types.VARCHAR}, {"subjectId", Types.BIGINT},
		{"color", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("progressionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("teacherId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("volee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("color", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Progression_Progression (progressionId LONG not null primary key,teacherId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,volee VARCHAR(75) null,subjectId LONG,color VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Progression_Progression";

	public static final String ORDER_BY_JPQL =
		" ORDER BY progression.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Progression_Progression.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRESSIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEACHERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Progression toModel(ProgressionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Progression model = new ProgressionImpl();

		model.setProgressionId(soapModel.getProgressionId());
		model.setTeacherId(soapModel.getTeacherId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setVolee(soapModel.getVolee());
		model.setSubjectId(soapModel.getSubjectId());
		model.setColor(soapModel.getColor());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Progression> toModels(ProgressionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Progression> models = new ArrayList<Progression>(
			soapModels.length);

		for (ProgressionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ProgressionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _progressionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProgressionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _progressionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Progression.class;
	}

	@Override
	public String getModelClassName() {
		return Progression.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Progression, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Progression, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Progression, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Progression)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Progression, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Progression, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Progression)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Progression, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Progression, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Progression>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Progression.class.getClassLoader(), Progression.class,
			ModelWrapper.class);

		try {
			Constructor<Progression> constructor =
				(Constructor<Progression>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Progression, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Progression, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Progression, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Progression, Object>>();
		Map<String, BiConsumer<Progression, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Progression, ?>>();

		attributeGetterFunctions.put(
			"progressionId", Progression::getProgressionId);
		attributeSetterBiConsumers.put(
			"progressionId",
			(BiConsumer<Progression, Long>)Progression::setProgressionId);
		attributeGetterFunctions.put("teacherId", Progression::getTeacherId);
		attributeSetterBiConsumers.put(
			"teacherId",
			(BiConsumer<Progression, Long>)Progression::setTeacherId);
		attributeGetterFunctions.put("createDate", Progression::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Progression, Date>)Progression::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Progression::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Progression, Date>)Progression::setModifiedDate);
		attributeGetterFunctions.put("name", Progression::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Progression, String>)Progression::setName);
		attributeGetterFunctions.put(
			"description", Progression::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Progression, String>)Progression::setDescription);
		attributeGetterFunctions.put("volee", Progression::getVolee);
		attributeSetterBiConsumers.put(
			"volee", (BiConsumer<Progression, String>)Progression::setVolee);
		attributeGetterFunctions.put("subjectId", Progression::getSubjectId);
		attributeSetterBiConsumers.put(
			"subjectId",
			(BiConsumer<Progression, Long>)Progression::setSubjectId);
		attributeGetterFunctions.put("color", Progression::getColor);
		attributeSetterBiConsumers.put(
			"color", (BiConsumer<Progression, String>)Progression::setColor);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getProgressionId() {
		return _progressionId;
	}

	@Override
	public void setProgressionId(long progressionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_progressionId = progressionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProgressionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("progressionId"));
	}

	@JSON
	@Override
	public long getTeacherId() {
		return _teacherId;
	}

	@Override
	public void setTeacherId(long teacherId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teacherId = teacherId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTeacherId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("teacherId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getVolee() {
		if (_volee == null) {
			return "";
		}
		else {
			return _volee;
		}
	}

	@Override
	public void setVolee(String volee) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_volee = volee;
	}

	@JSON
	@Override
	public long getSubjectId() {
		return _subjectId;
	}

	@Override
	public void setSubjectId(long subjectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subjectId = subjectId;
	}

	@JSON
	@Override
	public String getColor() {
		if (_color == null) {
			return "";
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_color = color;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Progression.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Progression toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Progression>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProgressionImpl progressionImpl = new ProgressionImpl();

		progressionImpl.setProgressionId(getProgressionId());
		progressionImpl.setTeacherId(getTeacherId());
		progressionImpl.setCreateDate(getCreateDate());
		progressionImpl.setModifiedDate(getModifiedDate());
		progressionImpl.setName(getName());
		progressionImpl.setDescription(getDescription());
		progressionImpl.setVolee(getVolee());
		progressionImpl.setSubjectId(getSubjectId());
		progressionImpl.setColor(getColor());

		progressionImpl.resetOriginalValues();

		return progressionImpl;
	}

	@Override
	public Progression cloneWithOriginalValues() {
		ProgressionImpl progressionImpl = new ProgressionImpl();

		progressionImpl.setProgressionId(
			this.<Long>getColumnOriginalValue("progressionId"));
		progressionImpl.setTeacherId(
			this.<Long>getColumnOriginalValue("teacherId"));
		progressionImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		progressionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		progressionImpl.setName(this.<String>getColumnOriginalValue("name"));
		progressionImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		progressionImpl.setVolee(this.<String>getColumnOriginalValue("volee"));
		progressionImpl.setSubjectId(
			this.<Long>getColumnOriginalValue("subjectId"));
		progressionImpl.setColor(this.<String>getColumnOriginalValue("color"));

		return progressionImpl;
	}

	@Override
	public int compareTo(Progression progression) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), progression.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Progression)) {
			return false;
		}

		Progression progression = (Progression)object;

		long primaryKey = progression.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Progression> toCacheModel() {
		ProgressionCacheModel progressionCacheModel =
			new ProgressionCacheModel();

		progressionCacheModel.progressionId = getProgressionId();

		progressionCacheModel.teacherId = getTeacherId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			progressionCacheModel.createDate = createDate.getTime();
		}
		else {
			progressionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			progressionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			progressionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		progressionCacheModel.name = getName();

		String name = progressionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			progressionCacheModel.name = null;
		}

		progressionCacheModel.description = getDescription();

		String description = progressionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			progressionCacheModel.description = null;
		}

		progressionCacheModel.volee = getVolee();

		String volee = progressionCacheModel.volee;

		if ((volee != null) && (volee.length() == 0)) {
			progressionCacheModel.volee = null;
		}

		progressionCacheModel.subjectId = getSubjectId();

		progressionCacheModel.color = getColor();

		String color = progressionCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			progressionCacheModel.color = null;
		}

		return progressionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Progression, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Progression, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Progression, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Progression)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Progression, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Progression, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Progression, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Progression)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Progression>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _progressionId;
	private long _teacherId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _description;
	private String _volee;
	private long _subjectId;
	private String _color;

	public <T> T getColumnValue(String columnName) {
		Function<Progression, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Progression)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("progressionId", _progressionId);
		_columnOriginalValues.put("teacherId", _teacherId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("volee", _volee);
		_columnOriginalValues.put("subjectId", _subjectId);
		_columnOriginalValues.put("color", _color);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("progressionId", 1L);

		columnBitmasks.put("teacherId", 2L);

		columnBitmasks.put("createDate", 4L);

		columnBitmasks.put("modifiedDate", 8L);

		columnBitmasks.put("name", 16L);

		columnBitmasks.put("description", 32L);

		columnBitmasks.put("volee", 64L);

		columnBitmasks.put("subjectId", 128L);

		columnBitmasks.put("color", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Progression _escapedModel;

}