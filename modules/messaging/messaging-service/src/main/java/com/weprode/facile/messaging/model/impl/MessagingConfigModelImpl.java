/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.facile.messaging.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.facile.messaging.model.MessagingConfig;
import com.weprode.facile.messaging.model.MessagingConfigModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MessagingConfig service. Represents a row in the &quot;Messaging_MessagingConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MessagingConfigModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessagingConfigImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessagingConfigImpl
 * @generated
 */
@JSON(strict = true)
public class MessagingConfigModelImpl
	extends BaseModelImpl<MessagingConfig> implements MessagingConfigModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a messaging config model instance should use the <code>MessagingConfig</code> interface instead.
	 */
	public static final String TABLE_NAME = "Messaging_MessagingConfig";

	public static final Object[][] TABLE_COLUMNS = {
		{"userId", Types.BIGINT}, {"isForwardActive", Types.BOOLEAN},
		{"forwardMail", Types.VARCHAR}, {"isSignatureActive", Types.BOOLEAN},
		{"signature", Types.VARCHAR}, {"isAutoReplyActive", Types.BOOLEAN},
		{"autoReplyContent", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isForwardActive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("forwardMail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isSignatureActive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("signature", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isAutoReplyActive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("autoReplyContent", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Messaging_MessagingConfig (userId LONG not null primary key,isForwardActive BOOLEAN,forwardMail VARCHAR(75) null,isSignatureActive BOOLEAN,signature VARCHAR(75) null,isAutoReplyActive BOOLEAN,autoReplyContent VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Messaging_MessagingConfig";

	public static final String ORDER_BY_JPQL =
		" ORDER BY messagingConfig.userId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Messaging_MessagingConfig.userId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MessagingConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MessagingConfig.class;
	}

	@Override
	public String getModelClassName() {
		return MessagingConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MessagingConfig, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MessagingConfig, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MessagingConfig, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MessagingConfig)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MessagingConfig, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MessagingConfig, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MessagingConfig)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MessagingConfig, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MessagingConfig, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<MessagingConfig, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MessagingConfig, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MessagingConfig, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<MessagingConfig, Object>>();
		Map<String, BiConsumer<MessagingConfig, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MessagingConfig, ?>>();

		attributeGetterFunctions.put("userId", MessagingConfig::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<MessagingConfig, Long>)MessagingConfig::setUserId);
		attributeGetterFunctions.put(
			"isForwardActive", MessagingConfig::getIsForwardActive);
		attributeSetterBiConsumers.put(
			"isForwardActive",
			(BiConsumer<MessagingConfig, Boolean>)
				MessagingConfig::setIsForwardActive);
		attributeGetterFunctions.put(
			"forwardMail", MessagingConfig::getForwardMail);
		attributeSetterBiConsumers.put(
			"forwardMail",
			(BiConsumer<MessagingConfig, String>)
				MessagingConfig::setForwardMail);
		attributeGetterFunctions.put(
			"isSignatureActive", MessagingConfig::getIsSignatureActive);
		attributeSetterBiConsumers.put(
			"isSignatureActive",
			(BiConsumer<MessagingConfig, Boolean>)
				MessagingConfig::setIsSignatureActive);
		attributeGetterFunctions.put(
			"signature", MessagingConfig::getSignature);
		attributeSetterBiConsumers.put(
			"signature",
			(BiConsumer<MessagingConfig, String>)MessagingConfig::setSignature);
		attributeGetterFunctions.put(
			"isAutoReplyActive", MessagingConfig::getIsAutoReplyActive);
		attributeSetterBiConsumers.put(
			"isAutoReplyActive",
			(BiConsumer<MessagingConfig, Boolean>)
				MessagingConfig::setIsAutoReplyActive);
		attributeGetterFunctions.put(
			"autoReplyContent", MessagingConfig::getAutoReplyContent);
		attributeSetterBiConsumers.put(
			"autoReplyContent",
			(BiConsumer<MessagingConfig, String>)
				MessagingConfig::setAutoReplyContent);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public boolean getIsForwardActive() {
		return _isForwardActive;
	}

	@JSON
	@Override
	public boolean isIsForwardActive() {
		return _isForwardActive;
	}

	@Override
	public void setIsForwardActive(boolean isForwardActive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isForwardActive = isForwardActive;
	}

	@JSON
	@Override
	public String getForwardMail() {
		if (_forwardMail == null) {
			return "";
		}
		else {
			return _forwardMail;
		}
	}

	@Override
	public void setForwardMail(String forwardMail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_forwardMail = forwardMail;
	}

	@JSON
	@Override
	public boolean getIsSignatureActive() {
		return _isSignatureActive;
	}

	@JSON
	@Override
	public boolean isIsSignatureActive() {
		return _isSignatureActive;
	}

	@Override
	public void setIsSignatureActive(boolean isSignatureActive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isSignatureActive = isSignatureActive;
	}

	@JSON
	@Override
	public String getSignature() {
		if (_signature == null) {
			return "";
		}
		else {
			return _signature;
		}
	}

	@Override
	public void setSignature(String signature) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signature = signature;
	}

	@JSON
	@Override
	public boolean getIsAutoReplyActive() {
		return _isAutoReplyActive;
	}

	@JSON
	@Override
	public boolean isIsAutoReplyActive() {
		return _isAutoReplyActive;
	}

	@Override
	public void setIsAutoReplyActive(boolean isAutoReplyActive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isAutoReplyActive = isAutoReplyActive;
	}

	@JSON
	@Override
	public String getAutoReplyContent() {
		if (_autoReplyContent == null) {
			return "";
		}
		else {
			return _autoReplyContent;
		}
	}

	@Override
	public void setAutoReplyContent(String autoReplyContent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_autoReplyContent = autoReplyContent;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MessagingConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MessagingConfig toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MessagingConfig>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MessagingConfigImpl messagingConfigImpl = new MessagingConfigImpl();

		messagingConfigImpl.setUserId(getUserId());
		messagingConfigImpl.setIsForwardActive(isIsForwardActive());
		messagingConfigImpl.setForwardMail(getForwardMail());
		messagingConfigImpl.setIsSignatureActive(isIsSignatureActive());
		messagingConfigImpl.setSignature(getSignature());
		messagingConfigImpl.setIsAutoReplyActive(isIsAutoReplyActive());
		messagingConfigImpl.setAutoReplyContent(getAutoReplyContent());

		messagingConfigImpl.resetOriginalValues();

		return messagingConfigImpl;
	}

	@Override
	public MessagingConfig cloneWithOriginalValues() {
		MessagingConfigImpl messagingConfigImpl = new MessagingConfigImpl();

		messagingConfigImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		messagingConfigImpl.setIsForwardActive(
			this.<Boolean>getColumnOriginalValue("isForwardActive"));
		messagingConfigImpl.setForwardMail(
			this.<String>getColumnOriginalValue("forwardMail"));
		messagingConfigImpl.setIsSignatureActive(
			this.<Boolean>getColumnOriginalValue("isSignatureActive"));
		messagingConfigImpl.setSignature(
			this.<String>getColumnOriginalValue("signature"));
		messagingConfigImpl.setIsAutoReplyActive(
			this.<Boolean>getColumnOriginalValue("isAutoReplyActive"));
		messagingConfigImpl.setAutoReplyContent(
			this.<String>getColumnOriginalValue("autoReplyContent"));

		return messagingConfigImpl;
	}

	@Override
	public int compareTo(MessagingConfig messagingConfig) {
		long primaryKey = messagingConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MessagingConfig)) {
			return false;
		}

		MessagingConfig messagingConfig = (MessagingConfig)object;

		long primaryKey = messagingConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MessagingConfig> toCacheModel() {
		MessagingConfigCacheModel messagingConfigCacheModel =
			new MessagingConfigCacheModel();

		messagingConfigCacheModel.userId = getUserId();

		messagingConfigCacheModel.isForwardActive = isIsForwardActive();

		messagingConfigCacheModel.forwardMail = getForwardMail();

		String forwardMail = messagingConfigCacheModel.forwardMail;

		if ((forwardMail != null) && (forwardMail.length() == 0)) {
			messagingConfigCacheModel.forwardMail = null;
		}

		messagingConfigCacheModel.isSignatureActive = isIsSignatureActive();

		messagingConfigCacheModel.signature = getSignature();

		String signature = messagingConfigCacheModel.signature;

		if ((signature != null) && (signature.length() == 0)) {
			messagingConfigCacheModel.signature = null;
		}

		messagingConfigCacheModel.isAutoReplyActive = isIsAutoReplyActive();

		messagingConfigCacheModel.autoReplyContent = getAutoReplyContent();

		String autoReplyContent = messagingConfigCacheModel.autoReplyContent;

		if ((autoReplyContent != null) && (autoReplyContent.length() == 0)) {
			messagingConfigCacheModel.autoReplyContent = null;
		}

		return messagingConfigCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MessagingConfig, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MessagingConfig, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MessagingConfig, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((MessagingConfig)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MessagingConfig>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MessagingConfig.class, ModelWrapper.class);

	}

	private long _userId;
	private boolean _isForwardActive;
	private String _forwardMail;
	private boolean _isSignatureActive;
	private String _signature;
	private boolean _isAutoReplyActive;
	private String _autoReplyContent;

	public <T> T getColumnValue(String columnName) {
		Function<MessagingConfig, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MessagingConfig)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("isForwardActive", _isForwardActive);
		_columnOriginalValues.put("forwardMail", _forwardMail);
		_columnOriginalValues.put("isSignatureActive", _isSignatureActive);
		_columnOriginalValues.put("signature", _signature);
		_columnOriginalValues.put("isAutoReplyActive", _isAutoReplyActive);
		_columnOriginalValues.put("autoReplyContent", _autoReplyContent);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("userId", 1L);

		columnBitmasks.put("isForwardActive", 2L);

		columnBitmasks.put("forwardMail", 4L);

		columnBitmasks.put("isSignatureActive", 8L);

		columnBitmasks.put("signature", 16L);

		columnBitmasks.put("isAutoReplyActive", 32L);

		columnBitmasks.put("autoReplyContent", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MessagingConfig _escapedModel;

}