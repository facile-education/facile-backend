/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.messaging.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.messaging.model.Message;
import com.weprode.nero.messaging.model.MessageModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Message service. Represents a row in the &quot;Messaging_Message&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MessageModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessageImpl
 * @generated
 */
@JSON(strict = true)
public class MessageModelImpl
	extends BaseModelImpl<Message> implements MessageModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a message model instance should use the <code>Message</code> interface instead.
	 */
	public static final String TABLE_NAME = "Messaging_Message";

	public static final Object[][] TABLE_COLUMNS = {
		{"messageId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"folderId", Types.BIGINT}, {"threadId", Types.BIGINT},
		{"sendMessageId", Types.BIGINT}, {"senderId", Types.BIGINT},
		{"sendDate", Types.TIMESTAMP}, {"senderName", Types.VARCHAR},
		{"messageSubject", Types.VARCHAR}, {"messageContent", Types.VARCHAR},
		{"isNew", Types.BOOLEAN}, {"readDate", Types.TIMESTAMP},
		{"isAnswered", Types.BOOLEAN}, {"isForwarded", Types.BOOLEAN},
		{"type_", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("messageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("threadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sendMessageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("senderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sendDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("senderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("messageSubject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("messageContent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isNew", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("readDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("isAnswered", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isForwarded", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Messaging_Message (messageId LONG not null primary key,companyId LONG,folderId LONG,threadId LONG,sendMessageId LONG,senderId LONG,sendDate DATE null,senderName VARCHAR(75) null,messageSubject STRING null,messageContent STRING null,isNew BOOLEAN,readDate DATE null,isAnswered BOOLEAN,isForwarded BOOLEAN,type_ INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table Messaging_Message";

	public static final String ORDER_BY_JPQL =
		" ORDER BY message.messageId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Messaging_Message.messageId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FOLDERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISNEW_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SENDMESSAGEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long THREADID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MESSAGEID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MessageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _messageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMessageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _messageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Message.class;
	}

	@Override
	public String getModelClassName() {
		return Message.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Message, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Message, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Message, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Message)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Message, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Message, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Message)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Message, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Message, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Message, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Message, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Message, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Message, Object>>();
		Map<String, BiConsumer<Message, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Message, ?>>();

		attributeGetterFunctions.put("messageId", Message::getMessageId);
		attributeSetterBiConsumers.put(
			"messageId", (BiConsumer<Message, Long>)Message::setMessageId);
		attributeGetterFunctions.put("companyId", Message::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Message, Long>)Message::setCompanyId);
		attributeGetterFunctions.put("folderId", Message::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId", (BiConsumer<Message, Long>)Message::setFolderId);
		attributeGetterFunctions.put("threadId", Message::getThreadId);
		attributeSetterBiConsumers.put(
			"threadId", (BiConsumer<Message, Long>)Message::setThreadId);
		attributeGetterFunctions.put(
			"sendMessageId", Message::getSendMessageId);
		attributeSetterBiConsumers.put(
			"sendMessageId",
			(BiConsumer<Message, Long>)Message::setSendMessageId);
		attributeGetterFunctions.put("senderId", Message::getSenderId);
		attributeSetterBiConsumers.put(
			"senderId", (BiConsumer<Message, Long>)Message::setSenderId);
		attributeGetterFunctions.put("sendDate", Message::getSendDate);
		attributeSetterBiConsumers.put(
			"sendDate", (BiConsumer<Message, Date>)Message::setSendDate);
		attributeGetterFunctions.put("senderName", Message::getSenderName);
		attributeSetterBiConsumers.put(
			"senderName", (BiConsumer<Message, String>)Message::setSenderName);
		attributeGetterFunctions.put(
			"messageSubject", Message::getMessageSubject);
		attributeSetterBiConsumers.put(
			"messageSubject",
			(BiConsumer<Message, String>)Message::setMessageSubject);
		attributeGetterFunctions.put(
			"messageContent", Message::getMessageContent);
		attributeSetterBiConsumers.put(
			"messageContent",
			(BiConsumer<Message, String>)Message::setMessageContent);
		attributeGetterFunctions.put("isNew", Message::getIsNew);
		attributeSetterBiConsumers.put(
			"isNew", (BiConsumer<Message, Boolean>)Message::setIsNew);
		attributeGetterFunctions.put("readDate", Message::getReadDate);
		attributeSetterBiConsumers.put(
			"readDate", (BiConsumer<Message, Date>)Message::setReadDate);
		attributeGetterFunctions.put("isAnswered", Message::getIsAnswered);
		attributeSetterBiConsumers.put(
			"isAnswered", (BiConsumer<Message, Boolean>)Message::setIsAnswered);
		attributeGetterFunctions.put("isForwarded", Message::getIsForwarded);
		attributeSetterBiConsumers.put(
			"isForwarded",
			(BiConsumer<Message, Boolean>)Message::setIsForwarded);
		attributeGetterFunctions.put("type", Message::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<Message, Integer>)Message::setType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMessageId() {
		return _messageId;
	}

	@Override
	public void setMessageId(long messageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_messageId = messageId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folderId = folderId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFolderId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("folderId"));
	}

	@JSON
	@Override
	public long getThreadId() {
		return _threadId;
	}

	@Override
	public void setThreadId(long threadId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_threadId = threadId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalThreadId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("threadId"));
	}

	@JSON
	@Override
	public long getSendMessageId() {
		return _sendMessageId;
	}

	@Override
	public void setSendMessageId(long sendMessageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendMessageId = sendMessageId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSendMessageId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sendMessageId"));
	}

	@JSON
	@Override
	public long getSenderId() {
		return _senderId;
	}

	@Override
	public void setSenderId(long senderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_senderId = senderId;
	}

	@JSON
	@Override
	public Date getSendDate() {
		return _sendDate;
	}

	@Override
	public void setSendDate(Date sendDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendDate = sendDate;
	}

	@JSON
	@Override
	public String getSenderName() {
		if (_senderName == null) {
			return "";
		}
		else {
			return _senderName;
		}
	}

	@Override
	public void setSenderName(String senderName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_senderName = senderName;
	}

	@JSON
	@Override
	public String getMessageSubject() {
		if (_messageSubject == null) {
			return "";
		}
		else {
			return _messageSubject;
		}
	}

	@Override
	public void setMessageSubject(String messageSubject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_messageSubject = messageSubject;
	}

	@JSON
	@Override
	public String getMessageContent() {
		if (_messageContent == null) {
			return "";
		}
		else {
			return _messageContent;
		}
	}

	@Override
	public void setMessageContent(String messageContent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_messageContent = messageContent;
	}

	@JSON
	@Override
	public boolean getIsNew() {
		return _isNew;
	}

	@JSON
	@Override
	public boolean isIsNew() {
		return _isNew;
	}

	@Override
	public void setIsNew(boolean isNew) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isNew = isNew;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsNew() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isNew"));
	}

	@JSON
	@Override
	public Date getReadDate() {
		return _readDate;
	}

	@Override
	public void setReadDate(Date readDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_readDate = readDate;
	}

	@JSON
	@Override
	public boolean getIsAnswered() {
		return _isAnswered;
	}

	@JSON
	@Override
	public boolean isIsAnswered() {
		return _isAnswered;
	}

	@Override
	public void setIsAnswered(boolean isAnswered) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isAnswered = isAnswered;
	}

	@JSON
	@Override
	public boolean getIsForwarded() {
		return _isForwarded;
	}

	@JSON
	@Override
	public boolean isIsForwarded() {
		return _isForwarded;
	}

	@Override
	public void setIsForwarded(boolean isForwarded) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isForwarded = isForwarded;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Message.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Message toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Message>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MessageImpl messageImpl = new MessageImpl();

		messageImpl.setMessageId(getMessageId());
		messageImpl.setCompanyId(getCompanyId());
		messageImpl.setFolderId(getFolderId());
		messageImpl.setThreadId(getThreadId());
		messageImpl.setSendMessageId(getSendMessageId());
		messageImpl.setSenderId(getSenderId());
		messageImpl.setSendDate(getSendDate());
		messageImpl.setSenderName(getSenderName());
		messageImpl.setMessageSubject(getMessageSubject());
		messageImpl.setMessageContent(getMessageContent());
		messageImpl.setIsNew(isIsNew());
		messageImpl.setReadDate(getReadDate());
		messageImpl.setIsAnswered(isIsAnswered());
		messageImpl.setIsForwarded(isIsForwarded());
		messageImpl.setType(getType());

		messageImpl.resetOriginalValues();

		return messageImpl;
	}

	@Override
	public Message cloneWithOriginalValues() {
		MessageImpl messageImpl = new MessageImpl();

		messageImpl.setMessageId(
			this.<Long>getColumnOriginalValue("messageId"));
		messageImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		messageImpl.setFolderId(this.<Long>getColumnOriginalValue("folderId"));
		messageImpl.setThreadId(this.<Long>getColumnOriginalValue("threadId"));
		messageImpl.setSendMessageId(
			this.<Long>getColumnOriginalValue("sendMessageId"));
		messageImpl.setSenderId(this.<Long>getColumnOriginalValue("senderId"));
		messageImpl.setSendDate(this.<Date>getColumnOriginalValue("sendDate"));
		messageImpl.setSenderName(
			this.<String>getColumnOriginalValue("senderName"));
		messageImpl.setMessageSubject(
			this.<String>getColumnOriginalValue("messageSubject"));
		messageImpl.setMessageContent(
			this.<String>getColumnOriginalValue("messageContent"));
		messageImpl.setIsNew(this.<Boolean>getColumnOriginalValue("isNew"));
		messageImpl.setReadDate(this.<Date>getColumnOriginalValue("readDate"));
		messageImpl.setIsAnswered(
			this.<Boolean>getColumnOriginalValue("isAnswered"));
		messageImpl.setIsForwarded(
			this.<Boolean>getColumnOriginalValue("isForwarded"));
		messageImpl.setType(this.<Integer>getColumnOriginalValue("type_"));

		return messageImpl;
	}

	@Override
	public int compareTo(Message message) {
		long primaryKey = message.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Message)) {
			return false;
		}

		Message message = (Message)object;

		long primaryKey = message.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Message> toCacheModel() {
		MessageCacheModel messageCacheModel = new MessageCacheModel();

		messageCacheModel.messageId = getMessageId();

		messageCacheModel.companyId = getCompanyId();

		messageCacheModel.folderId = getFolderId();

		messageCacheModel.threadId = getThreadId();

		messageCacheModel.sendMessageId = getSendMessageId();

		messageCacheModel.senderId = getSenderId();

		Date sendDate = getSendDate();

		if (sendDate != null) {
			messageCacheModel.sendDate = sendDate.getTime();
		}
		else {
			messageCacheModel.sendDate = Long.MIN_VALUE;
		}

		messageCacheModel.senderName = getSenderName();

		String senderName = messageCacheModel.senderName;

		if ((senderName != null) && (senderName.length() == 0)) {
			messageCacheModel.senderName = null;
		}

		messageCacheModel.messageSubject = getMessageSubject();

		String messageSubject = messageCacheModel.messageSubject;

		if ((messageSubject != null) && (messageSubject.length() == 0)) {
			messageCacheModel.messageSubject = null;
		}

		messageCacheModel.messageContent = getMessageContent();

		String messageContent = messageCacheModel.messageContent;

		if ((messageContent != null) && (messageContent.length() == 0)) {
			messageCacheModel.messageContent = null;
		}

		messageCacheModel.isNew = isIsNew();

		Date readDate = getReadDate();

		if (readDate != null) {
			messageCacheModel.readDate = readDate.getTime();
		}
		else {
			messageCacheModel.readDate = Long.MIN_VALUE;
		}

		messageCacheModel.isAnswered = isIsAnswered();

		messageCacheModel.isForwarded = isIsForwarded();

		messageCacheModel.type = getType();

		return messageCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Message, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Message, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Message, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Message)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Message>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Message.class, ModelWrapper.class);

	}

	private long _messageId;
	private long _companyId;
	private long _folderId;
	private long _threadId;
	private long _sendMessageId;
	private long _senderId;
	private Date _sendDate;
	private String _senderName;
	private String _messageSubject;
	private String _messageContent;
	private boolean _isNew;
	private Date _readDate;
	private boolean _isAnswered;
	private boolean _isForwarded;
	private int _type;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Message, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Message)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("messageId", _messageId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("folderId", _folderId);
		_columnOriginalValues.put("threadId", _threadId);
		_columnOriginalValues.put("sendMessageId", _sendMessageId);
		_columnOriginalValues.put("senderId", _senderId);
		_columnOriginalValues.put("sendDate", _sendDate);
		_columnOriginalValues.put("senderName", _senderName);
		_columnOriginalValues.put("messageSubject", _messageSubject);
		_columnOriginalValues.put("messageContent", _messageContent);
		_columnOriginalValues.put("isNew", _isNew);
		_columnOriginalValues.put("readDate", _readDate);
		_columnOriginalValues.put("isAnswered", _isAnswered);
		_columnOriginalValues.put("isForwarded", _isForwarded);
		_columnOriginalValues.put("type_", _type);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("messageId", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("folderId", 4L);

		columnBitmasks.put("threadId", 8L);

		columnBitmasks.put("sendMessageId", 16L);

		columnBitmasks.put("senderId", 32L);

		columnBitmasks.put("sendDate", 64L);

		columnBitmasks.put("senderName", 128L);

		columnBitmasks.put("messageSubject", 256L);

		columnBitmasks.put("messageContent", 512L);

		columnBitmasks.put("isNew", 1024L);

		columnBitmasks.put("readDate", 2048L);

		columnBitmasks.put("isAnswered", 4096L);

		columnBitmasks.put("isForwarded", 8192L);

		columnBitmasks.put("type_", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Message _escapedModel;

}