/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.messaging.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the MessagingConfig service. Represents a row in the &quot;Messaging_MessagingConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.weprode.nero.messaging.model.impl.MessagingConfigModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.weprode.nero.messaging.model.impl.MessagingConfigImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessagingConfig
 * @generated
 */
@ProviderType
public interface MessagingConfigModel extends BaseModel<MessagingConfig> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a messaging config model instance should use the {@link MessagingConfig} interface instead.
	 */

	/**
	 * Returns the primary key of this messaging config.
	 *
	 * @return the primary key of this messaging config
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this messaging config.
	 *
	 * @param primaryKey the primary key of this messaging config
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the user ID of this messaging config.
	 *
	 * @return the user ID of this messaging config
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this messaging config.
	 *
	 * @param userId the user ID of this messaging config
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this messaging config.
	 *
	 * @return the user uuid of this messaging config
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this messaging config.
	 *
	 * @param userUuid the user uuid of this messaging config
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the is forward active of this messaging config.
	 *
	 * @return the is forward active of this messaging config
	 */
	public boolean getIsForwardActive();

	/**
	 * Returns <code>true</code> if this messaging config is is forward active.
	 *
	 * @return <code>true</code> if this messaging config is is forward active; <code>false</code> otherwise
	 */
	public boolean isIsForwardActive();

	/**
	 * Sets whether this messaging config is is forward active.
	 *
	 * @param isForwardActive the is forward active of this messaging config
	 */
	public void setIsForwardActive(boolean isForwardActive);

	/**
	 * Returns the forward mail of this messaging config.
	 *
	 * @return the forward mail of this messaging config
	 */
	@AutoEscape
	public String getForwardMail();

	/**
	 * Sets the forward mail of this messaging config.
	 *
	 * @param forwardMail the forward mail of this messaging config
	 */
	public void setForwardMail(String forwardMail);

	/**
	 * Returns the is signature active of this messaging config.
	 *
	 * @return the is signature active of this messaging config
	 */
	public boolean getIsSignatureActive();

	/**
	 * Returns <code>true</code> if this messaging config is is signature active.
	 *
	 * @return <code>true</code> if this messaging config is is signature active; <code>false</code> otherwise
	 */
	public boolean isIsSignatureActive();

	/**
	 * Sets whether this messaging config is is signature active.
	 *
	 * @param isSignatureActive the is signature active of this messaging config
	 */
	public void setIsSignatureActive(boolean isSignatureActive);

	/**
	 * Returns the signature of this messaging config.
	 *
	 * @return the signature of this messaging config
	 */
	@AutoEscape
	public String getSignature();

	/**
	 * Sets the signature of this messaging config.
	 *
	 * @param signature the signature of this messaging config
	 */
	public void setSignature(String signature);

	/**
	 * Returns the is auto reply active of this messaging config.
	 *
	 * @return the is auto reply active of this messaging config
	 */
	public boolean getIsAutoReplyActive();

	/**
	 * Returns <code>true</code> if this messaging config is is auto reply active.
	 *
	 * @return <code>true</code> if this messaging config is is auto reply active; <code>false</code> otherwise
	 */
	public boolean isIsAutoReplyActive();

	/**
	 * Sets whether this messaging config is is auto reply active.
	 *
	 * @param isAutoReplyActive the is auto reply active of this messaging config
	 */
	public void setIsAutoReplyActive(boolean isAutoReplyActive);

	/**
	 * Returns the auto reply content of this messaging config.
	 *
	 * @return the auto reply content of this messaging config
	 */
	@AutoEscape
	public String getAutoReplyContent();

	/**
	 * Sets the auto reply content of this messaging config.
	 *
	 * @param autoReplyContent the auto reply content of this messaging config
	 */
	public void setAutoReplyContent(String autoReplyContent);

	@Override
	public MessagingConfig cloneWithOriginalValues();

}