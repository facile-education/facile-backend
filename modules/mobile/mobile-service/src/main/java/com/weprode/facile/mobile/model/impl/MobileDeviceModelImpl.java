/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.facile.mobile.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.facile.mobile.model.MobileDevice;
import com.weprode.facile.mobile.model.MobileDeviceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MobileDevice service. Represents a row in the &quot;Mobile_MobileDevice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MobileDeviceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MobileDeviceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MobileDeviceImpl
 * @generated
 */
@JSON(strict = true)
public class MobileDeviceModelImpl
	extends BaseModelImpl<MobileDevice> implements MobileDeviceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mobile device model instance should use the <code>MobileDevice</code> interface instead.
	 */
	public static final String TABLE_NAME = "Mobile_MobileDevice";

	public static final Object[][] TABLE_COLUMNS = {
		{"mobileDeviceId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"manufacturerDeviceId", Types.VARCHAR}, {"deviceModel", Types.VARCHAR},
		{"manufacturer", Types.VARCHAR}, {"operatingSystem", Types.VARCHAR},
		{"operatingSystemVersion", Types.VARCHAR}, {"browserUA", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mobileDeviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("manufacturerDeviceId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deviceModel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operatingSystem", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operatingSystemVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("browserUA", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Mobile_MobileDevice (mobileDeviceId LONG not null primary key,userId LONG,manufacturerDeviceId VARCHAR(75) null,deviceModel VARCHAR(75) null,manufacturer VARCHAR(75) null,operatingSystem VARCHAR(75) null,operatingSystemVersion VARCHAR(75) null,browserUA VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Mobile_MobileDevice";

	public static final String ORDER_BY_JPQL =
		" ORDER BY mobileDevice.mobileDeviceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Mobile_MobileDevice.mobileDeviceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANUFACTURERDEVICEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MOBILEDEVICEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MobileDeviceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mobileDeviceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMobileDeviceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mobileDeviceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MobileDevice.class;
	}

	@Override
	public String getModelClassName() {
		return MobileDevice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MobileDevice, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MobileDevice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MobileDevice, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MobileDevice)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MobileDevice, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MobileDevice, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MobileDevice)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MobileDevice, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MobileDevice, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<MobileDevice, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MobileDevice, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MobileDevice, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MobileDevice, Object>>();
		Map<String, BiConsumer<MobileDevice, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MobileDevice, ?>>();

		attributeGetterFunctions.put(
			"mobileDeviceId", MobileDevice::getMobileDeviceId);
		attributeSetterBiConsumers.put(
			"mobileDeviceId",
			(BiConsumer<MobileDevice, Long>)MobileDevice::setMobileDeviceId);
		attributeGetterFunctions.put("userId", MobileDevice::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<MobileDevice, Long>)MobileDevice::setUserId);
		attributeGetterFunctions.put(
			"manufacturerDeviceId", MobileDevice::getManufacturerDeviceId);
		attributeSetterBiConsumers.put(
			"manufacturerDeviceId",
			(BiConsumer<MobileDevice, String>)
				MobileDevice::setManufacturerDeviceId);
		attributeGetterFunctions.put(
			"deviceModel", MobileDevice::getDeviceModel);
		attributeSetterBiConsumers.put(
			"deviceModel",
			(BiConsumer<MobileDevice, String>)MobileDevice::setDeviceModel);
		attributeGetterFunctions.put(
			"manufacturer", MobileDevice::getManufacturer);
		attributeSetterBiConsumers.put(
			"manufacturer",
			(BiConsumer<MobileDevice, String>)MobileDevice::setManufacturer);
		attributeGetterFunctions.put(
			"operatingSystem", MobileDevice::getOperatingSystem);
		attributeSetterBiConsumers.put(
			"operatingSystem",
			(BiConsumer<MobileDevice, String>)MobileDevice::setOperatingSystem);
		attributeGetterFunctions.put(
			"operatingSystemVersion", MobileDevice::getOperatingSystemVersion);
		attributeSetterBiConsumers.put(
			"operatingSystemVersion",
			(BiConsumer<MobileDevice, String>)
				MobileDevice::setOperatingSystemVersion);
		attributeGetterFunctions.put("browserUA", MobileDevice::getBrowserUA);
		attributeSetterBiConsumers.put(
			"browserUA",
			(BiConsumer<MobileDevice, String>)MobileDevice::setBrowserUA);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMobileDeviceId() {
		return _mobileDeviceId;
	}

	@Override
	public void setMobileDeviceId(long mobileDeviceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileDeviceId = mobileDeviceId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getManufacturerDeviceId() {
		if (_manufacturerDeviceId == null) {
			return "";
		}
		else {
			return _manufacturerDeviceId;
		}
	}

	@Override
	public void setManufacturerDeviceId(String manufacturerDeviceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturerDeviceId = manufacturerDeviceId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalManufacturerDeviceId() {
		return getColumnOriginalValue("manufacturerDeviceId");
	}

	@JSON
	@Override
	public String getDeviceModel() {
		if (_deviceModel == null) {
			return "";
		}
		else {
			return _deviceModel;
		}
	}

	@Override
	public void setDeviceModel(String deviceModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deviceModel = deviceModel;
	}

	@JSON
	@Override
	public String getManufacturer() {
		if (_manufacturer == null) {
			return "";
		}
		else {
			return _manufacturer;
		}
	}

	@Override
	public void setManufacturer(String manufacturer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturer = manufacturer;
	}

	@JSON
	@Override
	public String getOperatingSystem() {
		if (_operatingSystem == null) {
			return "";
		}
		else {
			return _operatingSystem;
		}
	}

	@Override
	public void setOperatingSystem(String operatingSystem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operatingSystem = operatingSystem;
	}

	@JSON
	@Override
	public String getOperatingSystemVersion() {
		if (_operatingSystemVersion == null) {
			return "";
		}
		else {
			return _operatingSystemVersion;
		}
	}

	@Override
	public void setOperatingSystemVersion(String operatingSystemVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operatingSystemVersion = operatingSystemVersion;
	}

	@JSON
	@Override
	public String getBrowserUA() {
		if (_browserUA == null) {
			return "";
		}
		else {
			return _browserUA;
		}
	}

	@Override
	public void setBrowserUA(String browserUA) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_browserUA = browserUA;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MobileDevice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MobileDevice toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MobileDevice>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MobileDeviceImpl mobileDeviceImpl = new MobileDeviceImpl();

		mobileDeviceImpl.setMobileDeviceId(getMobileDeviceId());
		mobileDeviceImpl.setUserId(getUserId());
		mobileDeviceImpl.setManufacturerDeviceId(getManufacturerDeviceId());
		mobileDeviceImpl.setDeviceModel(getDeviceModel());
		mobileDeviceImpl.setManufacturer(getManufacturer());
		mobileDeviceImpl.setOperatingSystem(getOperatingSystem());
		mobileDeviceImpl.setOperatingSystemVersion(getOperatingSystemVersion());
		mobileDeviceImpl.setBrowserUA(getBrowserUA());

		mobileDeviceImpl.resetOriginalValues();

		return mobileDeviceImpl;
	}

	@Override
	public MobileDevice cloneWithOriginalValues() {
		MobileDeviceImpl mobileDeviceImpl = new MobileDeviceImpl();

		mobileDeviceImpl.setMobileDeviceId(
			this.<Long>getColumnOriginalValue("mobileDeviceId"));
		mobileDeviceImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		mobileDeviceImpl.setManufacturerDeviceId(
			this.<String>getColumnOriginalValue("manufacturerDeviceId"));
		mobileDeviceImpl.setDeviceModel(
			this.<String>getColumnOriginalValue("deviceModel"));
		mobileDeviceImpl.setManufacturer(
			this.<String>getColumnOriginalValue("manufacturer"));
		mobileDeviceImpl.setOperatingSystem(
			this.<String>getColumnOriginalValue("operatingSystem"));
		mobileDeviceImpl.setOperatingSystemVersion(
			this.<String>getColumnOriginalValue("operatingSystemVersion"));
		mobileDeviceImpl.setBrowserUA(
			this.<String>getColumnOriginalValue("browserUA"));

		return mobileDeviceImpl;
	}

	@Override
	public int compareTo(MobileDevice mobileDevice) {
		long primaryKey = mobileDevice.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MobileDevice)) {
			return false;
		}

		MobileDevice mobileDevice = (MobileDevice)object;

		long primaryKey = mobileDevice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MobileDevice> toCacheModel() {
		MobileDeviceCacheModel mobileDeviceCacheModel =
			new MobileDeviceCacheModel();

		mobileDeviceCacheModel.mobileDeviceId = getMobileDeviceId();

		mobileDeviceCacheModel.userId = getUserId();

		mobileDeviceCacheModel.manufacturerDeviceId = getManufacturerDeviceId();

		String manufacturerDeviceId =
			mobileDeviceCacheModel.manufacturerDeviceId;

		if ((manufacturerDeviceId != null) &&
			(manufacturerDeviceId.length() == 0)) {

			mobileDeviceCacheModel.manufacturerDeviceId = null;
		}

		mobileDeviceCacheModel.deviceModel = getDeviceModel();

		String deviceModel = mobileDeviceCacheModel.deviceModel;

		if ((deviceModel != null) && (deviceModel.length() == 0)) {
			mobileDeviceCacheModel.deviceModel = null;
		}

		mobileDeviceCacheModel.manufacturer = getManufacturer();

		String manufacturer = mobileDeviceCacheModel.manufacturer;

		if ((manufacturer != null) && (manufacturer.length() == 0)) {
			mobileDeviceCacheModel.manufacturer = null;
		}

		mobileDeviceCacheModel.operatingSystem = getOperatingSystem();

		String operatingSystem = mobileDeviceCacheModel.operatingSystem;

		if ((operatingSystem != null) && (operatingSystem.length() == 0)) {
			mobileDeviceCacheModel.operatingSystem = null;
		}

		mobileDeviceCacheModel.operatingSystemVersion =
			getOperatingSystemVersion();

		String operatingSystemVersion =
			mobileDeviceCacheModel.operatingSystemVersion;

		if ((operatingSystemVersion != null) &&
			(operatingSystemVersion.length() == 0)) {

			mobileDeviceCacheModel.operatingSystemVersion = null;
		}

		mobileDeviceCacheModel.browserUA = getBrowserUA();

		String browserUA = mobileDeviceCacheModel.browserUA;

		if ((browserUA != null) && (browserUA.length() == 0)) {
			mobileDeviceCacheModel.browserUA = null;
		}

		return mobileDeviceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MobileDevice, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MobileDevice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MobileDevice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((MobileDevice)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MobileDevice>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MobileDevice.class, ModelWrapper.class);

	}

	private long _mobileDeviceId;
	private long _userId;
	private String _manufacturerDeviceId;
	private String _deviceModel;
	private String _manufacturer;
	private String _operatingSystem;
	private String _operatingSystemVersion;
	private String _browserUA;

	public <T> T getColumnValue(String columnName) {
		Function<MobileDevice, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MobileDevice)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mobileDeviceId", _mobileDeviceId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put(
			"manufacturerDeviceId", _manufacturerDeviceId);
		_columnOriginalValues.put("deviceModel", _deviceModel);
		_columnOriginalValues.put("manufacturer", _manufacturer);
		_columnOriginalValues.put("operatingSystem", _operatingSystem);
		_columnOriginalValues.put(
			"operatingSystemVersion", _operatingSystemVersion);
		_columnOriginalValues.put("browserUA", _browserUA);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mobileDeviceId", 1L);

		columnBitmasks.put("userId", 2L);

		columnBitmasks.put("manufacturerDeviceId", 4L);

		columnBitmasks.put("deviceModel", 8L);

		columnBitmasks.put("manufacturer", 16L);

		columnBitmasks.put("operatingSystem", 32L);

		columnBitmasks.put("operatingSystemVersion", 64L);

		columnBitmasks.put("browserUA", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MobileDevice _escapedModel;

}