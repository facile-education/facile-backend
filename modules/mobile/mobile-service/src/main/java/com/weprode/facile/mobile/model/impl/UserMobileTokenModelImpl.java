/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.facile.mobile.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.facile.mobile.model.UserMobileToken;
import com.weprode.facile.mobile.model.UserMobileTokenModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserMobileToken service. Represents a row in the &quot;Mobile_UserMobileToken&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserMobileTokenModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserMobileTokenImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserMobileTokenImpl
 * @generated
 */
@JSON(strict = true)
public class UserMobileTokenModelImpl
	extends BaseModelImpl<UserMobileToken> implements UserMobileTokenModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user mobile token model instance should use the <code>UserMobileToken</code> interface instead.
	 */
	public static final String TABLE_NAME = "Mobile_UserMobileToken";

	public static final Object[][] TABLE_COLUMNS = {
		{"userId", Types.BIGINT}, {"mobileToken", Types.VARCHAR},
		{"creationDate", Types.TIMESTAMP}, {"modificationDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mobileToken", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("creationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modificationDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Mobile_UserMobileToken (userId LONG not null primary key,mobileToken VARCHAR(75) null,creationDate DATE null,modificationDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table Mobile_UserMobileToken";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userMobileToken.userId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Mobile_UserMobileToken.userId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MOBILETOKEN_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public UserMobileTokenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserMobileToken.class;
	}

	@Override
	public String getModelClassName() {
		return UserMobileToken.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserMobileToken, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserMobileToken, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserMobileToken, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserMobileToken)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserMobileToken, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserMobileToken, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserMobileToken)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserMobileToken, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserMobileToken, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<UserMobileToken, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserMobileToken, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserMobileToken, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<UserMobileToken, Object>>();
		Map<String, BiConsumer<UserMobileToken, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UserMobileToken, ?>>();

		attributeGetterFunctions.put("userId", UserMobileToken::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<UserMobileToken, Long>)UserMobileToken::setUserId);
		attributeGetterFunctions.put(
			"mobileToken", UserMobileToken::getMobileToken);
		attributeSetterBiConsumers.put(
			"mobileToken",
			(BiConsumer<UserMobileToken, String>)
				UserMobileToken::setMobileToken);
		attributeGetterFunctions.put(
			"creationDate", UserMobileToken::getCreationDate);
		attributeSetterBiConsumers.put(
			"creationDate",
			(BiConsumer<UserMobileToken, Date>)
				UserMobileToken::setCreationDate);
		attributeGetterFunctions.put(
			"modificationDate", UserMobileToken::getModificationDate);
		attributeSetterBiConsumers.put(
			"modificationDate",
			(BiConsumer<UserMobileToken, Date>)
				UserMobileToken::setModificationDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getMobileToken() {
		if (_mobileToken == null) {
			return "";
		}
		else {
			return _mobileToken;
		}
	}

	@Override
	public void setMobileToken(String mobileToken) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileToken = mobileToken;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalMobileToken() {
		return getColumnOriginalValue("mobileToken");
	}

	@JSON
	@Override
	public Date getCreationDate() {
		return _creationDate;
	}

	@Override
	public void setCreationDate(Date creationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creationDate = creationDate;
	}

	@JSON
	@Override
	public Date getModificationDate() {
		return _modificationDate;
	}

	@Override
	public void setModificationDate(Date modificationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modificationDate = modificationDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, UserMobileToken.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserMobileToken toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserMobileToken>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserMobileTokenImpl userMobileTokenImpl = new UserMobileTokenImpl();

		userMobileTokenImpl.setUserId(getUserId());
		userMobileTokenImpl.setMobileToken(getMobileToken());
		userMobileTokenImpl.setCreationDate(getCreationDate());
		userMobileTokenImpl.setModificationDate(getModificationDate());

		userMobileTokenImpl.resetOriginalValues();

		return userMobileTokenImpl;
	}

	@Override
	public UserMobileToken cloneWithOriginalValues() {
		UserMobileTokenImpl userMobileTokenImpl = new UserMobileTokenImpl();

		userMobileTokenImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		userMobileTokenImpl.setMobileToken(
			this.<String>getColumnOriginalValue("mobileToken"));
		userMobileTokenImpl.setCreationDate(
			this.<Date>getColumnOriginalValue("creationDate"));
		userMobileTokenImpl.setModificationDate(
			this.<Date>getColumnOriginalValue("modificationDate"));

		return userMobileTokenImpl;
	}

	@Override
	public int compareTo(UserMobileToken userMobileToken) {
		long primaryKey = userMobileToken.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserMobileToken)) {
			return false;
		}

		UserMobileToken userMobileToken = (UserMobileToken)object;

		long primaryKey = userMobileToken.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserMobileToken> toCacheModel() {
		UserMobileTokenCacheModel userMobileTokenCacheModel =
			new UserMobileTokenCacheModel();

		userMobileTokenCacheModel.userId = getUserId();

		userMobileTokenCacheModel.mobileToken = getMobileToken();

		String mobileToken = userMobileTokenCacheModel.mobileToken;

		if ((mobileToken != null) && (mobileToken.length() == 0)) {
			userMobileTokenCacheModel.mobileToken = null;
		}

		Date creationDate = getCreationDate();

		if (creationDate != null) {
			userMobileTokenCacheModel.creationDate = creationDate.getTime();
		}
		else {
			userMobileTokenCacheModel.creationDate = Long.MIN_VALUE;
		}

		Date modificationDate = getModificationDate();

		if (modificationDate != null) {
			userMobileTokenCacheModel.modificationDate =
				modificationDate.getTime();
		}
		else {
			userMobileTokenCacheModel.modificationDate = Long.MIN_VALUE;
		}

		return userMobileTokenCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserMobileToken, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserMobileToken, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserMobileToken, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((UserMobileToken)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserMobileToken>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					UserMobileToken.class, ModelWrapper.class);

	}

	private long _userId;
	private String _mobileToken;
	private Date _creationDate;
	private Date _modificationDate;

	public <T> T getColumnValue(String columnName) {
		Function<UserMobileToken, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UserMobileToken)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("mobileToken", _mobileToken);
		_columnOriginalValues.put("creationDate", _creationDate);
		_columnOriginalValues.put("modificationDate", _modificationDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("userId", 1L);

		columnBitmasks.put("mobileToken", 2L);

		columnBitmasks.put("creationDate", 4L);

		columnBitmasks.put("modificationDate", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UserMobileToken _escapedModel;

}