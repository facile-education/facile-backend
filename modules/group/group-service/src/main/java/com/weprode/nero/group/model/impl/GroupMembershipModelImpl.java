/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.group.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.group.model.GroupMembership;
import com.weprode.nero.group.model.GroupMembershipModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the GroupMembership service. Represents a row in the &quot;Group_GroupMembership&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GroupMembershipModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GroupMembershipImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GroupMembershipImpl
 * @generated
 */
public class GroupMembershipModelImpl
	extends BaseModelImpl<GroupMembership> implements GroupMembershipModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a group membership model instance should use the <code>GroupMembership</code> interface instead.
	 */
	public static final String TABLE_NAME = "Group_GroupMembership";

	public static final Object[][] TABLE_COLUMNS = {
		{"membershipId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"startDate", Types.TIMESTAMP},
		{"endDate", Types.TIMESTAMP}, {"fullYear", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("membershipId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fullYear", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Group_GroupMembership (membershipId LONG not null primary key,groupId LONG,userId LONG,startDate DATE null,endDate DATE null,fullYear BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table Group_GroupMembership";

	public static final String ORDER_BY_JPQL =
		" ORDER BY groupMembership.membershipId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Group_GroupMembership.membershipId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MEMBERSHIPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public GroupMembershipModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _membershipId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMembershipId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _membershipId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GroupMembership.class;
	}

	@Override
	public String getModelClassName() {
		return GroupMembership.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GroupMembership, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GroupMembership, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GroupMembership, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((GroupMembership)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GroupMembership, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GroupMembership, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GroupMembership)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GroupMembership, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GroupMembership, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<GroupMembership, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<GroupMembership, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<GroupMembership, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<GroupMembership, Object>>();
		Map<String, BiConsumer<GroupMembership, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<GroupMembership, ?>>();

		attributeGetterFunctions.put(
			"membershipId", GroupMembership::getMembershipId);
		attributeSetterBiConsumers.put(
			"membershipId",
			(BiConsumer<GroupMembership, Long>)
				GroupMembership::setMembershipId);
		attributeGetterFunctions.put("groupId", GroupMembership::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<GroupMembership, Long>)GroupMembership::setGroupId);
		attributeGetterFunctions.put("userId", GroupMembership::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<GroupMembership, Long>)GroupMembership::setUserId);
		attributeGetterFunctions.put(
			"startDate", GroupMembership::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<GroupMembership, Date>)GroupMembership::setStartDate);
		attributeGetterFunctions.put("endDate", GroupMembership::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<GroupMembership, Date>)GroupMembership::setEndDate);
		attributeGetterFunctions.put("fullYear", GroupMembership::getFullYear);
		attributeSetterBiConsumers.put(
			"fullYear",
			(BiConsumer<GroupMembership, Boolean>)GroupMembership::setFullYear);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMembershipId() {
		return _membershipId;
	}

	@Override
	public void setMembershipId(long membershipId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_membershipId = membershipId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@Override
	public boolean getFullYear() {
		return _fullYear;
	}

	@Override
	public boolean isFullYear() {
		return _fullYear;
	}

	@Override
	public void setFullYear(boolean fullYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullYear = fullYear;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, GroupMembership.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GroupMembership toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GroupMembership>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GroupMembershipImpl groupMembershipImpl = new GroupMembershipImpl();

		groupMembershipImpl.setMembershipId(getMembershipId());
		groupMembershipImpl.setGroupId(getGroupId());
		groupMembershipImpl.setUserId(getUserId());
		groupMembershipImpl.setStartDate(getStartDate());
		groupMembershipImpl.setEndDate(getEndDate());
		groupMembershipImpl.setFullYear(isFullYear());

		groupMembershipImpl.resetOriginalValues();

		return groupMembershipImpl;
	}

	@Override
	public GroupMembership cloneWithOriginalValues() {
		GroupMembershipImpl groupMembershipImpl = new GroupMembershipImpl();

		groupMembershipImpl.setMembershipId(
			this.<Long>getColumnOriginalValue("membershipId"));
		groupMembershipImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		groupMembershipImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		groupMembershipImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		groupMembershipImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));
		groupMembershipImpl.setFullYear(
			this.<Boolean>getColumnOriginalValue("fullYear"));

		return groupMembershipImpl;
	}

	@Override
	public int compareTo(GroupMembership groupMembership) {
		long primaryKey = groupMembership.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof GroupMembership)) {
			return false;
		}

		GroupMembership groupMembership = (GroupMembership)object;

		long primaryKey = groupMembership.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<GroupMembership> toCacheModel() {
		GroupMembershipCacheModel groupMembershipCacheModel =
			new GroupMembershipCacheModel();

		groupMembershipCacheModel.membershipId = getMembershipId();

		groupMembershipCacheModel.groupId = getGroupId();

		groupMembershipCacheModel.userId = getUserId();

		Date startDate = getStartDate();

		if (startDate != null) {
			groupMembershipCacheModel.startDate = startDate.getTime();
		}
		else {
			groupMembershipCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			groupMembershipCacheModel.endDate = endDate.getTime();
		}
		else {
			groupMembershipCacheModel.endDate = Long.MIN_VALUE;
		}

		groupMembershipCacheModel.fullYear = isFullYear();

		return groupMembershipCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GroupMembership, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GroupMembership, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GroupMembership, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((GroupMembership)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, GroupMembership>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					GroupMembership.class, ModelWrapper.class);

	}

	private long _membershipId;
	private long _groupId;
	private long _userId;
	private Date _startDate;
	private Date _endDate;
	private boolean _fullYear;

	public <T> T getColumnValue(String columnName) {
		Function<GroupMembership, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((GroupMembership)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("membershipId", _membershipId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("fullYear", _fullYear);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("membershipId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("startDate", 8L);

		columnBitmasks.put("endDate", 16L);

		columnBitmasks.put("fullYear", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private GroupMembership _escapedModel;

}