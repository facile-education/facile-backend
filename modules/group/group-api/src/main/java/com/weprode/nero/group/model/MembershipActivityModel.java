/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.group.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the MembershipActivity service. Represents a row in the &quot;Group_MembershipActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.weprode.nero.group.model.impl.MembershipActivityModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.weprode.nero.group.model.impl.MembershipActivityImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MembershipActivity
 * @generated
 */
@ProviderType
public interface MembershipActivityModel extends BaseModel<MembershipActivity> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a membership activity model instance should use the {@link MembershipActivity} interface instead.
	 */

	/**
	 * Returns the primary key of this membership activity.
	 *
	 * @return the primary key of this membership activity
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this membership activity.
	 *
	 * @param primaryKey the primary key of this membership activity
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the membership activity ID of this membership activity.
	 *
	 * @return the membership activity ID of this membership activity
	 */
	public long getMembershipActivityId();

	/**
	 * Sets the membership activity ID of this membership activity.
	 *
	 * @param membershipActivityId the membership activity ID of this membership activity
	 */
	public void setMembershipActivityId(long membershipActivityId);

	/**
	 * Returns the group ID of this membership activity.
	 *
	 * @return the group ID of this membership activity
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this membership activity.
	 *
	 * @param groupId the group ID of this membership activity
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the action user ID of this membership activity.
	 *
	 * @return the action user ID of this membership activity
	 */
	public long getActionUserId();

	/**
	 * Sets the action user ID of this membership activity.
	 *
	 * @param actionUserId the action user ID of this membership activity
	 */
	public void setActionUserId(long actionUserId);

	/**
	 * Returns the action user uuid of this membership activity.
	 *
	 * @return the action user uuid of this membership activity
	 */
	public String getActionUserUuid();

	/**
	 * Sets the action user uuid of this membership activity.
	 *
	 * @param actionUserUuid the action user uuid of this membership activity
	 */
	public void setActionUserUuid(String actionUserUuid);

	/**
	 * Returns the target user IDs of this membership activity.
	 *
	 * @return the target user IDs of this membership activity
	 */
	@AutoEscape
	public String getTargetUserIds();

	/**
	 * Sets the target user IDs of this membership activity.
	 *
	 * @param targetUserIds the target user IDs of this membership activity
	 */
	public void setTargetUserIds(String targetUserIds);

	/**
	 * Returns the incoming of this membership activity.
	 *
	 * @return the incoming of this membership activity
	 */
	public boolean getIncoming();

	/**
	 * Returns <code>true</code> if this membership activity is incoming.
	 *
	 * @return <code>true</code> if this membership activity is incoming; <code>false</code> otherwise
	 */
	public boolean isIncoming();

	/**
	 * Sets whether this membership activity is incoming.
	 *
	 * @param incoming the incoming of this membership activity
	 */
	public void setIncoming(boolean incoming);

	/**
	 * Returns the movement date of this membership activity.
	 *
	 * @return the movement date of this membership activity
	 */
	public Date getMovementDate();

	/**
	 * Sets the movement date of this membership activity.
	 *
	 * @param movementDate the movement date of this membership activity
	 */
	public void setMovementDate(Date movementDate);

	@Override
	public MembershipActivity cloneWithOriginalValues();

}