/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.help.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.help.model.HelpItem;
import com.weprode.nero.help.model.HelpItemModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HelpItem service. Represents a row in the &quot;Help_HelpItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HelpItemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HelpItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HelpItemImpl
 * @generated
 */
@JSON(strict = true)
public class HelpItemModelImpl
	extends BaseModelImpl<HelpItem> implements HelpItemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a help item model instance should use the <code>HelpItem</code> interface instead.
	 */
	public static final String TABLE_NAME = "Help_HelpItem";

	public static final Object[][] TABLE_COLUMNS = {
		{"itemId", Types.BIGINT}, {"categoryId", Types.BIGINT},
		{"itemName", Types.VARCHAR}, {"videoURL", Types.VARCHAR},
		{"videoDescription", Types.VARCHAR}, {"manual", Types.VARCHAR},
		{"position", Types.INTEGER}, {"language", Types.VARCHAR},
		{"isManagement", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("itemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("itemName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videoURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videoDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manual", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("position", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isManagement", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Help_HelpItem (itemId LONG not null primary key,categoryId LONG,itemName VARCHAR(75) null,videoURL VARCHAR(200) null,videoDescription STRING null,manual STRING null,position INTEGER,language VARCHAR(75) null,isManagement BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table Help_HelpItem";

	public static final String ORDER_BY_JPQL = " ORDER BY helpItem.itemId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Help_HelpItem.itemId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CATEGORYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ITEMID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HelpItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HelpItem.class;
	}

	@Override
	public String getModelClassName() {
		return HelpItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HelpItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HelpItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HelpItem, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((HelpItem)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HelpItem, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HelpItem, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HelpItem)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HelpItem, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HelpItem, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<HelpItem, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<HelpItem, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<HelpItem, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<HelpItem, Object>>();
		Map<String, BiConsumer<HelpItem, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<HelpItem, ?>>();

		attributeGetterFunctions.put("itemId", HelpItem::getItemId);
		attributeSetterBiConsumers.put(
			"itemId", (BiConsumer<HelpItem, Long>)HelpItem::setItemId);
		attributeGetterFunctions.put("categoryId", HelpItem::getCategoryId);
		attributeSetterBiConsumers.put(
			"categoryId", (BiConsumer<HelpItem, Long>)HelpItem::setCategoryId);
		attributeGetterFunctions.put("itemName", HelpItem::getItemName);
		attributeSetterBiConsumers.put(
			"itemName", (BiConsumer<HelpItem, String>)HelpItem::setItemName);
		attributeGetterFunctions.put("videoURL", HelpItem::getVideoURL);
		attributeSetterBiConsumers.put(
			"videoURL", (BiConsumer<HelpItem, String>)HelpItem::setVideoURL);
		attributeGetterFunctions.put(
			"videoDescription", HelpItem::getVideoDescription);
		attributeSetterBiConsumers.put(
			"videoDescription",
			(BiConsumer<HelpItem, String>)HelpItem::setVideoDescription);
		attributeGetterFunctions.put("manual", HelpItem::getManual);
		attributeSetterBiConsumers.put(
			"manual", (BiConsumer<HelpItem, String>)HelpItem::setManual);
		attributeGetterFunctions.put("position", HelpItem::getPosition);
		attributeSetterBiConsumers.put(
			"position", (BiConsumer<HelpItem, Integer>)HelpItem::setPosition);
		attributeGetterFunctions.put("language", HelpItem::getLanguage);
		attributeSetterBiConsumers.put(
			"language", (BiConsumer<HelpItem, String>)HelpItem::setLanguage);
		attributeGetterFunctions.put("isManagement", HelpItem::getIsManagement);
		attributeSetterBiConsumers.put(
			"isManagement",
			(BiConsumer<HelpItem, Boolean>)HelpItem::setIsManagement);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemId = itemId;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryId = categoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCategoryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("categoryId"));
	}

	@JSON
	@Override
	public String getItemName() {
		if (_itemName == null) {
			return "";
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemName = itemName;
	}

	@JSON
	@Override
	public String getVideoURL() {
		if (_videoURL == null) {
			return "";
		}
		else {
			return _videoURL;
		}
	}

	@Override
	public void setVideoURL(String videoURL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_videoURL = videoURL;
	}

	@JSON
	@Override
	public String getVideoDescription() {
		if (_videoDescription == null) {
			return "";
		}
		else {
			return _videoDescription;
		}
	}

	@Override
	public void setVideoDescription(String videoDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_videoDescription = videoDescription;
	}

	@JSON
	@Override
	public String getManual() {
		if (_manual == null) {
			return "";
		}
		else {
			return _manual;
		}
	}

	@Override
	public void setManual(String manual) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manual = manual;
	}

	@JSON
	@Override
	public int getPosition() {
		return _position;
	}

	@Override
	public void setPosition(int position) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_position = position;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_language = language;
	}

	@JSON
	@Override
	public boolean getIsManagement() {
		return _isManagement;
	}

	@JSON
	@Override
	public boolean isIsManagement() {
		return _isManagement;
	}

	@Override
	public void setIsManagement(boolean isManagement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isManagement = isManagement;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, HelpItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HelpItem toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, HelpItem>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HelpItemImpl helpItemImpl = new HelpItemImpl();

		helpItemImpl.setItemId(getItemId());
		helpItemImpl.setCategoryId(getCategoryId());
		helpItemImpl.setItemName(getItemName());
		helpItemImpl.setVideoURL(getVideoURL());
		helpItemImpl.setVideoDescription(getVideoDescription());
		helpItemImpl.setManual(getManual());
		helpItemImpl.setPosition(getPosition());
		helpItemImpl.setLanguage(getLanguage());
		helpItemImpl.setIsManagement(isIsManagement());

		helpItemImpl.resetOriginalValues();

		return helpItemImpl;
	}

	@Override
	public HelpItem cloneWithOriginalValues() {
		HelpItemImpl helpItemImpl = new HelpItemImpl();

		helpItemImpl.setItemId(this.<Long>getColumnOriginalValue("itemId"));
		helpItemImpl.setCategoryId(
			this.<Long>getColumnOriginalValue("categoryId"));
		helpItemImpl.setItemName(
			this.<String>getColumnOriginalValue("itemName"));
		helpItemImpl.setVideoURL(
			this.<String>getColumnOriginalValue("videoURL"));
		helpItemImpl.setVideoDescription(
			this.<String>getColumnOriginalValue("videoDescription"));
		helpItemImpl.setManual(this.<String>getColumnOriginalValue("manual"));
		helpItemImpl.setPosition(
			this.<Integer>getColumnOriginalValue("position"));
		helpItemImpl.setLanguage(
			this.<String>getColumnOriginalValue("language"));
		helpItemImpl.setIsManagement(
			this.<Boolean>getColumnOriginalValue("isManagement"));

		return helpItemImpl;
	}

	@Override
	public int compareTo(HelpItem helpItem) {
		long primaryKey = helpItem.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof HelpItem)) {
			return false;
		}

		HelpItem helpItem = (HelpItem)object;

		long primaryKey = helpItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<HelpItem> toCacheModel() {
		HelpItemCacheModel helpItemCacheModel = new HelpItemCacheModel();

		helpItemCacheModel.itemId = getItemId();

		helpItemCacheModel.categoryId = getCategoryId();

		helpItemCacheModel.itemName = getItemName();

		String itemName = helpItemCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			helpItemCacheModel.itemName = null;
		}

		helpItemCacheModel.videoURL = getVideoURL();

		String videoURL = helpItemCacheModel.videoURL;

		if ((videoURL != null) && (videoURL.length() == 0)) {
			helpItemCacheModel.videoURL = null;
		}

		helpItemCacheModel.videoDescription = getVideoDescription();

		String videoDescription = helpItemCacheModel.videoDescription;

		if ((videoDescription != null) && (videoDescription.length() == 0)) {
			helpItemCacheModel.videoDescription = null;
		}

		helpItemCacheModel.manual = getManual();

		String manual = helpItemCacheModel.manual;

		if ((manual != null) && (manual.length() == 0)) {
			helpItemCacheModel.manual = null;
		}

		helpItemCacheModel.position = getPosition();

		helpItemCacheModel.language = getLanguage();

		String language = helpItemCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			helpItemCacheModel.language = null;
		}

		helpItemCacheModel.isManagement = isIsManagement();

		return helpItemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HelpItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HelpItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HelpItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((HelpItem)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, HelpItem>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					HelpItem.class, ModelWrapper.class);

	}

	private long _itemId;
	private long _categoryId;
	private String _itemName;
	private String _videoURL;
	private String _videoDescription;
	private String _manual;
	private int _position;
	private String _language;
	private boolean _isManagement;

	public <T> T getColumnValue(String columnName) {
		Function<HelpItem, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((HelpItem)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("itemId", _itemId);
		_columnOriginalValues.put("categoryId", _categoryId);
		_columnOriginalValues.put("itemName", _itemName);
		_columnOriginalValues.put("videoURL", _videoURL);
		_columnOriginalValues.put("videoDescription", _videoDescription);
		_columnOriginalValues.put("manual", _manual);
		_columnOriginalValues.put("position", _position);
		_columnOriginalValues.put("language", _language);
		_columnOriginalValues.put("isManagement", _isManagement);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("itemId", 1L);

		columnBitmasks.put("categoryId", 2L);

		columnBitmasks.put("itemName", 4L);

		columnBitmasks.put("videoURL", 8L);

		columnBitmasks.put("videoDescription", 16L);

		columnBitmasks.put("manual", 32L);

		columnBitmasks.put("position", 64L);

		columnBitmasks.put("language", 128L);

		columnBitmasks.put("isManagement", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private HelpItem _escapedModel;

}