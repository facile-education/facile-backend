/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.document.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.document.model.Version;
import com.weprode.nero.document.model.VersionModel;
import com.weprode.nero.document.model.VersionSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Version service. Represents a row in the &quot;Document_Version&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>VersionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VersionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VersionImpl
 * @generated
 */
@JSON(strict = true)
public class VersionModelImpl
	extends BaseModelImpl<Version> implements VersionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a version model instance should use the <code>Version</code> interface instead.
	 */
	public static final String TABLE_NAME = "Document_Version";

	public static final Object[][] TABLE_COLUMNS = {
		{"fileVersionId", Types.BIGINT}, {"dlFileEntryId", Types.BIGINT},
		{"versionNumber", Types.DOUBLE}, {"comment_", Types.VARCHAR},
		{"downloadCount", Types.BIGINT}, {"viewCount", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fileVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("versionNumber", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("downloadCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("viewCount", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Document_Version (fileVersionId LONG not null primary key,dlFileEntryId LONG,versionNumber DOUBLE,comment_ VARCHAR(75) null,downloadCount LONG,viewCount LONG)";

	public static final String TABLE_SQL_DROP = "drop table Document_Version";

	public static final String ORDER_BY_JPQL =
		" ORDER BY version.fileVersionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Document_Version.fileVersionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DLFILEENTRYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long VERSIONNUMBER_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILEVERSIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Version toModel(VersionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Version model = new VersionImpl();

		model.setFileVersionId(soapModel.getFileVersionId());
		model.setDlFileEntryId(soapModel.getDlFileEntryId());
		model.setVersionNumber(soapModel.getVersionNumber());
		model.setComment(soapModel.getComment());
		model.setDownloadCount(soapModel.getDownloadCount());
		model.setViewCount(soapModel.getViewCount());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Version> toModels(VersionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Version> models = new ArrayList<Version>(soapModels.length);

		for (VersionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public VersionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fileVersionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFileVersionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fileVersionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Version.class;
	}

	@Override
	public String getModelClassName() {
		return Version.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Version, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Version, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Version, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Version)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Version, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Version, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Version)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Version, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Version, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Version>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Version.class.getClassLoader(), Version.class, ModelWrapper.class);

		try {
			Constructor<Version> constructor =
				(Constructor<Version>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Version, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Version, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Version, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Version, Object>>();
		Map<String, BiConsumer<Version, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Version, ?>>();

		attributeGetterFunctions.put(
			"fileVersionId", Version::getFileVersionId);
		attributeSetterBiConsumers.put(
			"fileVersionId",
			(BiConsumer<Version, Long>)Version::setFileVersionId);
		attributeGetterFunctions.put(
			"dlFileEntryId", Version::getDlFileEntryId);
		attributeSetterBiConsumers.put(
			"dlFileEntryId",
			(BiConsumer<Version, Long>)Version::setDlFileEntryId);
		attributeGetterFunctions.put(
			"versionNumber", Version::getVersionNumber);
		attributeSetterBiConsumers.put(
			"versionNumber",
			(BiConsumer<Version, Double>)Version::setVersionNumber);
		attributeGetterFunctions.put("comment", Version::getComment);
		attributeSetterBiConsumers.put(
			"comment", (BiConsumer<Version, String>)Version::setComment);
		attributeGetterFunctions.put(
			"downloadCount", Version::getDownloadCount);
		attributeSetterBiConsumers.put(
			"downloadCount",
			(BiConsumer<Version, Long>)Version::setDownloadCount);
		attributeGetterFunctions.put("viewCount", Version::getViewCount);
		attributeSetterBiConsumers.put(
			"viewCount", (BiConsumer<Version, Long>)Version::setViewCount);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFileVersionId() {
		return _fileVersionId;
	}

	@Override
	public void setFileVersionId(long fileVersionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileVersionId = fileVersionId;
	}

	@JSON
	@Override
	public long getDlFileEntryId() {
		return _dlFileEntryId;
	}

	@Override
	public void setDlFileEntryId(long dlFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlFileEntryId = dlFileEntryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDlFileEntryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("dlFileEntryId"));
	}

	@JSON
	@Override
	public double getVersionNumber() {
		return _versionNumber;
	}

	@Override
	public void setVersionNumber(double versionNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_versionNumber = versionNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public double getOriginalVersionNumber() {
		return GetterUtil.getDouble(
			this.<Double>getColumnOriginalValue("versionNumber"));
	}

	@JSON
	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comment = comment;
	}

	@JSON
	@Override
	public long getDownloadCount() {
		return _downloadCount;
	}

	@Override
	public void setDownloadCount(long downloadCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_downloadCount = downloadCount;
	}

	@JSON
	@Override
	public long getViewCount() {
		return _viewCount;
	}

	@Override
	public void setViewCount(long viewCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_viewCount = viewCount;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Version.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Version toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Version>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VersionImpl versionImpl = new VersionImpl();

		versionImpl.setFileVersionId(getFileVersionId());
		versionImpl.setDlFileEntryId(getDlFileEntryId());
		versionImpl.setVersionNumber(getVersionNumber());
		versionImpl.setComment(getComment());
		versionImpl.setDownloadCount(getDownloadCount());
		versionImpl.setViewCount(getViewCount());

		versionImpl.resetOriginalValues();

		return versionImpl;
	}

	@Override
	public Version cloneWithOriginalValues() {
		VersionImpl versionImpl = new VersionImpl();

		versionImpl.setFileVersionId(
			this.<Long>getColumnOriginalValue("fileVersionId"));
		versionImpl.setDlFileEntryId(
			this.<Long>getColumnOriginalValue("dlFileEntryId"));
		versionImpl.setVersionNumber(
			this.<Double>getColumnOriginalValue("versionNumber"));
		versionImpl.setComment(this.<String>getColumnOriginalValue("comment_"));
		versionImpl.setDownloadCount(
			this.<Long>getColumnOriginalValue("downloadCount"));
		versionImpl.setViewCount(
			this.<Long>getColumnOriginalValue("viewCount"));

		return versionImpl;
	}

	@Override
	public int compareTo(Version version) {
		long primaryKey = version.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Version)) {
			return false;
		}

		Version version = (Version)object;

		long primaryKey = version.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Version> toCacheModel() {
		VersionCacheModel versionCacheModel = new VersionCacheModel();

		versionCacheModel.fileVersionId = getFileVersionId();

		versionCacheModel.dlFileEntryId = getDlFileEntryId();

		versionCacheModel.versionNumber = getVersionNumber();

		versionCacheModel.comment = getComment();

		String comment = versionCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			versionCacheModel.comment = null;
		}

		versionCacheModel.downloadCount = getDownloadCount();

		versionCacheModel.viewCount = getViewCount();

		return versionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Version, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Version, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Version, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Version)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Version, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Version, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Version, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Version)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Version>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _fileVersionId;
	private long _dlFileEntryId;
	private double _versionNumber;
	private String _comment;
	private long _downloadCount;
	private long _viewCount;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Version, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Version)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("fileVersionId", _fileVersionId);
		_columnOriginalValues.put("dlFileEntryId", _dlFileEntryId);
		_columnOriginalValues.put("versionNumber", _versionNumber);
		_columnOriginalValues.put("comment_", _comment);
		_columnOriginalValues.put("downloadCount", _downloadCount);
		_columnOriginalValues.put("viewCount", _viewCount);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("comment_", "comment");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fileVersionId", 1L);

		columnBitmasks.put("dlFileEntryId", 2L);

		columnBitmasks.put("versionNumber", 4L);

		columnBitmasks.put("comment_", 8L);

		columnBitmasks.put("downloadCount", 16L);

		columnBitmasks.put("viewCount", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Version _escapedModel;

}