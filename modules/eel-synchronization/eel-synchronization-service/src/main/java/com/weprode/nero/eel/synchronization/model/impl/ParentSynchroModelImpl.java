/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.weprode.nero.eel.synchronization.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.weprode.nero.eel.synchronization.model.ParentSynchro;
import com.weprode.nero.eel.synchronization.model.ParentSynchroModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ParentSynchro service. Represents a row in the &quot;EELSynchro_ParentSynchro&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ParentSynchroModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ParentSynchroImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ParentSynchroImpl
 * @generated
 */
public class ParentSynchroModelImpl
	extends BaseModelImpl<ParentSynchro> implements ParentSynchroModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a parent synchro model instance should use the <code>ParentSynchro</code> interface instead.
	 */
	public static final String TABLE_NAME = "EELSynchro_ParentSynchro";

	public static final Object[][] TABLE_COLUMNS = {
		{"schoolId", Types.BIGINT}, {"startDate", Types.TIMESTAMP},
		{"endDate", Types.TIMESTAMP}, {"fileName", Types.VARCHAR},
		{"lineCount", Types.BIGINT}, {"errorCount", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("schoolId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lineCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("errorCount", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EELSynchro_ParentSynchro (schoolId LONG not null primary key,startDate DATE null,endDate DATE null,fileName VARCHAR(75) null,lineCount LONG,errorCount LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table EELSynchro_ParentSynchro";

	public static final String ORDER_BY_JPQL =
		" ORDER BY parentSynchro.schoolId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EELSynchro_ParentSynchro.schoolId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SCHOOLID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ParentSynchroModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _schoolId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSchoolId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _schoolId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ParentSynchro.class;
	}

	@Override
	public String getModelClassName() {
		return ParentSynchro.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ParentSynchro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ParentSynchro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ParentSynchro, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ParentSynchro)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ParentSynchro, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ParentSynchro, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ParentSynchro)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ParentSynchro, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ParentSynchro, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ParentSynchro, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ParentSynchro, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ParentSynchro, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ParentSynchro, Object>>();
		Map<String, BiConsumer<ParentSynchro, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ParentSynchro, ?>>();

		attributeGetterFunctions.put("schoolId", ParentSynchro::getSchoolId);
		attributeSetterBiConsumers.put(
			"schoolId",
			(BiConsumer<ParentSynchro, Long>)ParentSynchro::setSchoolId);
		attributeGetterFunctions.put("startDate", ParentSynchro::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<ParentSynchro, Date>)ParentSynchro::setStartDate);
		attributeGetterFunctions.put("endDate", ParentSynchro::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<ParentSynchro, Date>)ParentSynchro::setEndDate);
		attributeGetterFunctions.put("fileName", ParentSynchro::getFileName);
		attributeSetterBiConsumers.put(
			"fileName",
			(BiConsumer<ParentSynchro, String>)ParentSynchro::setFileName);
		attributeGetterFunctions.put("lineCount", ParentSynchro::getLineCount);
		attributeSetterBiConsumers.put(
			"lineCount",
			(BiConsumer<ParentSynchro, Long>)ParentSynchro::setLineCount);
		attributeGetterFunctions.put(
			"errorCount", ParentSynchro::getErrorCount);
		attributeSetterBiConsumers.put(
			"errorCount",
			(BiConsumer<ParentSynchro, Long>)ParentSynchro::setErrorCount);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getSchoolId() {
		return _schoolId;
	}

	@Override
	public void setSchoolId(long schoolId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_schoolId = schoolId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSchoolId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("schoolId"));
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@Override
	public String getFileName() {
		if (_fileName == null) {
			return "";
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileName = fileName;
	}

	@Override
	public long getLineCount() {
		return _lineCount;
	}

	@Override
	public void setLineCount(long lineCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lineCount = lineCount;
	}

	@Override
	public long getErrorCount() {
		return _errorCount;
	}

	@Override
	public void setErrorCount(long errorCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_errorCount = errorCount;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ParentSynchro.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ParentSynchro toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ParentSynchro>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ParentSynchroImpl parentSynchroImpl = new ParentSynchroImpl();

		parentSynchroImpl.setSchoolId(getSchoolId());
		parentSynchroImpl.setStartDate(getStartDate());
		parentSynchroImpl.setEndDate(getEndDate());
		parentSynchroImpl.setFileName(getFileName());
		parentSynchroImpl.setLineCount(getLineCount());
		parentSynchroImpl.setErrorCount(getErrorCount());

		parentSynchroImpl.resetOriginalValues();

		return parentSynchroImpl;
	}

	@Override
	public ParentSynchro cloneWithOriginalValues() {
		ParentSynchroImpl parentSynchroImpl = new ParentSynchroImpl();

		parentSynchroImpl.setSchoolId(
			this.<Long>getColumnOriginalValue("schoolId"));
		parentSynchroImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		parentSynchroImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));
		parentSynchroImpl.setFileName(
			this.<String>getColumnOriginalValue("fileName"));
		parentSynchroImpl.setLineCount(
			this.<Long>getColumnOriginalValue("lineCount"));
		parentSynchroImpl.setErrorCount(
			this.<Long>getColumnOriginalValue("errorCount"));

		return parentSynchroImpl;
	}

	@Override
	public int compareTo(ParentSynchro parentSynchro) {
		long primaryKey = parentSynchro.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ParentSynchro)) {
			return false;
		}

		ParentSynchro parentSynchro = (ParentSynchro)object;

		long primaryKey = parentSynchro.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ParentSynchro> toCacheModel() {
		ParentSynchroCacheModel parentSynchroCacheModel =
			new ParentSynchroCacheModel();

		parentSynchroCacheModel.schoolId = getSchoolId();

		Date startDate = getStartDate();

		if (startDate != null) {
			parentSynchroCacheModel.startDate = startDate.getTime();
		}
		else {
			parentSynchroCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			parentSynchroCacheModel.endDate = endDate.getTime();
		}
		else {
			parentSynchroCacheModel.endDate = Long.MIN_VALUE;
		}

		parentSynchroCacheModel.fileName = getFileName();

		String fileName = parentSynchroCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			parentSynchroCacheModel.fileName = null;
		}

		parentSynchroCacheModel.lineCount = getLineCount();

		parentSynchroCacheModel.errorCount = getErrorCount();

		return parentSynchroCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ParentSynchro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ParentSynchro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ParentSynchro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ParentSynchro)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ParentSynchro>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ParentSynchro.class, ModelWrapper.class);

	}

	private long _schoolId;
	private Date _startDate;
	private Date _endDate;
	private String _fileName;
	private long _lineCount;
	private long _errorCount;

	public <T> T getColumnValue(String columnName) {
		Function<ParentSynchro, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ParentSynchro)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("schoolId", _schoolId);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("fileName", _fileName);
		_columnOriginalValues.put("lineCount", _lineCount);
		_columnOriginalValues.put("errorCount", _errorCount);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("schoolId", 1L);

		columnBitmasks.put("startDate", 2L);

		columnBitmasks.put("endDate", 4L);

		columnBitmasks.put("fileName", 8L);

		columnBitmasks.put("lineCount", 16L);

		columnBitmasks.put("errorCount", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ParentSynchro _escapedModel;

}